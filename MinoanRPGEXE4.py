### JCB game notes. All headings and notes provided in between "###", deactivated code after "#" ###

### Initialisation ###
import os, random, time, pygame, array, sys
import win32com.client as wincl
speak = wincl.Dispatch("SAPI.SpVoice")
pygame.init()
font = pygame.font.SysFont('georgia',15, False)
global action
text_colour = (0,0,240)
document_id = "Minoan RPG 2022 Version 0.1"

### Game help ###
instructions = "Dungeon exploring is a dangerous activity and most adventurers die in this pursuit. There are the risk of dead ends, no lighting in the dungeons, no keys being dropped by monsters or even treasure rooms, but you can always press escape to exit safely.  These dungeons are especially dangerous so pick off the weaker creatures in the hope of finding the treasure room key and avoid the griffins at all costs. So make sure you backup your save game on a regular basis and spend your money on health and armor in the town. If you are wealthy enough you can enter an estate to indulge! You can copy and edit your save_game and map text files, and save backups in case you need to reinstall the game. During battles you must press spacebar to roll your attack dice ranging from 1 to 100, and then your attack bonus and the monsters defence bonus are used to determine your final attack number. A final attack over 50 results in the monster losing 1 hit point, otherwise you lose 1 hit point for that round of combat.   If you have 5 gold pieces you can craft a torch by typing 0, which will light the area you are exploring. But beware if you enter a battle you must fight to the end. You can change the upcoming map type by typing, 4,5,6 or 7 in the game, but it will revert to the random room map type after a map has been played."

### Game inputs ###
action = 'new game'
game_objectives_list1 = ['You freed prisoners.', 'A priestess joined your following.', 'You found a tablet describing the philosophy of infinity.', 'You found a section of a sacred statue.', 'You found a section of a sacred tablet.', 'You found a section of a sacred map.', 'You have found a section of a sacred piece of armor.', 'You found sacred tablets documenting the first civilisations.', 'You freed slaves held captive.', 'You found nothing of interest.', 'You discovered the true horrors of this evil place.', 'You found a gathering of priestesses.', 'You found numerous tablets documenting trade transactions.', 'You read a series of tablets on Gilgamesh.']
game_objective1 = random.choice(game_objectives_list1)
game_objective_found = " "
game_event_list1 = ['Dark', 'Damp', 'Old', 'Cursed', 'Feared', 'Sacred', 'Ancient', 'Buried', 'Hidden','Cold','Humid','Drenched','Submerged','Diseased','Evil']
game_event1 = random.choice(game_event_list1)
game_event_list2 = ['Minoan', 'Athenian', 'Mycenaean', 'Egyptian', 'Minotaur', 'Babylonian']
game_event2 = random.choice(game_event_list2)
game_event_list3 = ['Fort','Shrine','Temple', 'Cavern','Den', 'Tower','Camp','Crypt']
game_event3 = random.choice(game_event_list3)
game_events = [game_event1, game_event2, game_event3]
game_status = "Exploring"
character_name = str('Player')
character_ac, character_hp, character_xp, character_gold, character_level  = 0,10,0,0,0
character_history = ' '
player_attack, player_defence, death_count, list_number, list_no, max_monsters = character_level+character_ac, 0, 0, 0, 0, 10
monster_ac, monster_xp, monster_gold, monster_level, monster_hp  = 0,0,0,0,3
player_attack = character_level+character_ac
character_status = 'Attack bonus: +' + str(player_attack)
monster_tiles0 = ['Guard.png', 'Priestess.png', 'Minotaur.png', 'Undead.png', 'Item.png', 'Wolf.png', 'Arthropleura.png', 'Megarachne.png', 'Serpent.png', 'Hound.png', 'Griffin.png']
monster_name0 = random.choice(monster_tiles0)
monster_name = str(monster_name0)
monster_status = 'Defence bonus: -' + str(monster_ac)
screen_width, screen_height = 900, 520
current_map = []
current_map_list = []
current_monster_list = []
history_list_num = 0
new_line = 0
backtemplate = pygame.image.load('backplate5.png')
img_inventory = pygame.image.load('img_inventory.png')
img_selection = pygame.image.load('img_rolldice.png')
img_monster1 = pygame.image.load('img_monster1.png')
character_tiles = ['test9.png']
charfight_tiles = ['test9.png']
#character_tiles = ['char1a.png', 'char1b.png', 'char1c.png']
#charfight_tiles = ['char1a.png', 'char1b.png', 'char1c.png','char1d.png', 'char1e.png', 'char1f.png','char1g.png', 'char1h.png']
char = pygame.image.load(random.choice(character_tiles))
charfight = pygame.image.load(random.choice(charfight_tiles))
char_torch = pygame.image.load('test9c.png')
char_torch2 = pygame.image.load('test9d.png')
char1 = pygame.image.load('Guard.png')
char2 = pygame.image.load('Priestess.png')
char3 = pygame.image.load('undead.png')
char4 = pygame.image.load('Minotaur.png')
char5 = pygame.image.load('Item.png')
char6 = pygame.image.load('Wolf.png')
char7 = pygame.image.load('Arthropleura.png')
char8 = pygame.image.load('Megarachne.png')
char9 = pygame.image.load('Serpent.png')
char10 = pygame.image.load('Hound.png')
char11 = pygame.image.load('Griffin.png')
chartile1 = pygame.image.load('Pattern1.png')
chartile2 = pygame.image.load('Pattern2.png')
chartile3 = pygame.image.load('Pattern3.png')
chartile4 = pygame.image.load('Pattern4.png')
chartile5 = pygame.image.load('Pattern5.png')
chartile6 = pygame.image.load('Pattern6.png')
switchon = pygame.image.load('switchon.png')
switchoff = pygame.image.load('switchoff.png')
fire_tiles = ['fire.png', 'fire2.png', 'fire3.png', 'fire4.png', 'fire5.png', 'fire6.png', 'fire7.png' ]
wall_tiles0 = ['walls1.png', 'walls2.png', 'walls3.png','walls4.png','walls5.png','walls6.png','walls7.png','walls8.png','walls9.png']
wall0 = random.choice(wall_tiles0)
#walls = pygame.image.load(wall0)
walls = pygame.image.load('walls9.png')
wall_listmap2 = []
monster1 = pygame.image.load('persone.png')
bg_list = ['backgroundtest11.jpg' ,'backgroundtest12.jpg' ,'backgroundtest13.jpg','backgroundtest0.jpg','backgroundtest1.jpg' ,'backgroundtest2.jpg' ,'backgroundtest3.jpg','backgroundtest4.jpg','backgroundtest5.jpg' ,'backgroundtest6.jpg' ,'backgroundtest7.jpg','backgroundtest8.jpg','backgroundtest9.jpg' ,'backgroundtest10.jpg','backgroundtest0.jpg','backgroundtest90.jpg','backgroundtest91.jpg' ,'backgroundtest92.jpg' ,'backgroundtest93.jpg','backgroundtest94.jpg','backgroundtest95.jpg' ,'backgroundtest96.jpg' ,'backgroundtest97.jpg','backgroundtest98.jpg','backgroundtest99.jpg' ,'backgroundtest90.jpg','backgroundtest100.jpg','backgroundtest101.jpg' ,'backgroundtest102.jpg' ,'backgroundtest103.jpg','backgroundtest104.jpg','backgroundtest105.jpg' ,'backgroundtest106.jpg' ,'backgroundtest107.jpg','backgroundtest108.jpg','backgroundtest109.jpg' ,'backgroundtest110.jpg' ,'backgroundtest11.jpg', 'backgroundtest12.jpg']
bg_choice = random.choice(bg_list)
bg = pygame.image.load(bg_choice)
win = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Minoan RPG")
start_tile = pygame.image.load('entrance.png')
end_tile = pygame.image.load('exit.png')
end_tile2 = pygame.image.load('exit2.png')
startx, starty  = 40, 280
endx, endy = 560,280
switchx, switchy = 80, 360
x, y = startx+40, starty
switch_light = False
treasure_room = False
treasure_claimed = False
battle = False
monster_encounter = False
global monster_count
monster_count = 1
run = True
lights = False
torch = False
walking = [pygame.image.load('persona.png'), pygame.image.load('personc.png'), pygame.image.load('persona.png'), pygame.image.load('persond.png'), pygame.image.load('persone.png'), pygame.image.load('personf.png')]
sound1 = pygame.mixer.Sound('footsteps.wav')
soundevent = pygame.mixer.Sound('dicethrow.wav')
soundstart = pygame.mixer.Sound('start1.wav')
soundteleport = pygame.mixer.Sound('teleport2.wav')
soundmiss = pygame.mixer.Sound('miss1.wav')
soundmenu = pygame.mixer.Sound('menuselect2.wav')
soundmonsterdeath = pygame.mixer.Sound('monsterdeath1.wav')
sounddeath = pygame.mixer.Sound('death1.wav')
soundsword = pygame.mixer.Sound('fall1.wav')
music1 = pygame.mixer.music.load('menu.mp3')
die_roll = False
new_map = True
estate = 0
offspring = 0

### Room 1 maps ###
room1_list1 = [(40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (200, 120), (40, 160), (80, 160), (160, 160), (200, 160)]
room1_list2 = [(40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (200, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160)]
room1_list3 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160)]
room1_list4 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160)]
room1_list5 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160)]
room1_list6 = [(600, 80), (40, 120), (600, 120), (40, 160)]
room_lists1 = [room1_list1, room1_list2, room1_list3, room1_list4, room1_list5, room1_list6]
room_list1 = random.choice(room_lists1)

### Room 2 maps ###
room2_list1 = [(440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
room2_list2 = [(440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
room2_list3 = [(440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
room2_list4 = [(440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
room2_list5 = [(520, 0)]
room2_list6 = [(440, 0)]
room_lists2 = [room2_list1, room2_list2, room2_list3, room2_list4, room2_list5, room2_list6]
room_list2 = random.choice(room_lists2)

### Room 3 maps ###
room3_list1 = [(40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480)]
room3_list2 = [(40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480)]
room3_list3 = [(40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480)]
room3_list4 = [(0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480)]
room3_list5 = [(0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 440), (240, 440), (0, 480), (40, 480), (80, 480), (160, 480), (200, 480), (240, 480)]
room3_list6 = [(600, 400), (40, 440), (600, 440), (40, 480)]
room_lists3 = [room3_list1, room3_list2, room3_list3, room3_list4, room3_list5, room3_list6]
room_list3 = random.choice(room_lists3)

### Room 4 maps ###
room4_list1 = [(0, 200), (40, 200), (80, 200), (160, 200), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (480, 200), (520, 200), (560, 200), (600, 200), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (400, 320), (480, 320), (520, 320), (560, 320), (600, 320)]
room4_list2 = [(440, 200), (480, 200), (520, 200), (560, 200)]
room4_list3 = [(0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (480, 200), (520, 200), (560, 200), (600, 200), (240, 240), (0, 320), (40, 320), (80, 320), (120, 320), (160, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (400, 320), (480, 320), (520, 320), (560, 320), (600, 320)]
room4_list4 = [(0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (240, 240), (640, 240), (320, 280), (640, 280), (0, 320), (40, 320), (80, 320), (120, 320), (160, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (600, 320), (640, 320)]
room4_list5 = [(0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (240, 200), (240, 240), (240, 280)]
room4_list6 = [(0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (240, 200), (240, 240), (240, 280), (0, 320), (40, 320), (80, 320), (120, 320), (160, 320), (240, 320)]
room_lists4 = [room4_list1, room4_list2, room4_list3, room4_list4, room4_list5, room4_list6]
room_list4 = random.choice(room_lists4)

### Room 5 maps ###
room5_list1 = [(240, 160), (280, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 280), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320)]
room5_list2 = [(240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 240), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320)]
room5_list3 = [(240, 160), (320, 160), (360, 160), (240, 200), (240, 240), (320, 240), (320, 280), (240, 320), (280, 320), (320, 320), (400, 320)]
room5_list4 = [(240, 160), (480, 160), (280, 200), (320, 200), (400, 200), (440, 200), (440, 240), (280, 280), (320, 280), (400, 280), (440, 280), (240, 320), (480, 320)]
room5_list5 = [(200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (360, 280), (400, 280), (440, 280)]
room5_list6 = [(200, 200), (240, 200), (280, 200), (320, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (400, 280), (440, 280)]
room_lists5 = [room5_list1, room5_list2, room5_list3, room5_list4, room5_list5, room5_list6]
room_list5 = random.choice(room_lists5)

### Room 6 maps ###
room6_list1 = [(440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (600, 320), (640, 320)]
room6_list2 = [(440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (440, 240), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (640, 320)]
room6_list3 = [(400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (560, 280), (400, 320), (440, 320), (520, 320), (560, 320)]
room6_list4 = [(400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320)]
room6_list5 = [(360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (560, 240), (640, 240), (640, 280), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (640, 320)]
room6_list6 = [(360, 240), (400, 240), (480, 240), (520, 240), (560, 240), (600, 240), (640, 240), (640, 280), (360, 320), (400, 320), (480, 320), (520, 320), (560, 320), (640, 320)]
room_lists6 = [room6_list1, room6_list2, room6_list3, room6_list4, room6_list5, room6_list6]
room_list6 = random.choice(room_lists6)

### Room 7 maps ###
room7_list1 = [(40, 400), (80, 400), (160, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480)]
room7_list2 = [(440, 0)]
room7_list3 = [(40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480)]
room7_list4 = [(0, 360), (80, 360), (120, 360), (160, 360), (200, 360), (240, 360), (0, 400), (0, 440), (80, 440), (120, 440), (160, 440), (200, 440), (240, 440)]
room7_list5 = [(40, 360), (80, 360), (120, 360), (160, 360), (240, 360), (40, 440), (80, 440), (120, 440), (160, 440), (240, 440)]
room7_list6 = [(0, 360), (80, 360), (120, 360), (160, 360), (240, 360), (80, 400), (240, 400), (40, 440), (80, 440), (160, 440), (240, 440), (160, 480)]
room_lists7 = [room7_list1, room7_list2, room7_list3, room7_list4, room7_list5, room7_list6]
room_list7 = random.choice(room_lists7)

### Room 8 maps ###
room8_list1 = [(80, 0)]
room8_list2 = [(440, 0)]
room8_list3 = [(600, 0)]
room8_list4 = [(40, 80)]
room8_list5 = [(320, 80)]
room8_list6 = [(600, 80)]
room_lists8 = [room8_list1, room8_list2, room8_list3, room8_list4, room8_list5, room8_list6]
room_list8 = random.choice(room_lists8)

### Room 9 maps ###
room9_list1 = [(400, 360), (480, 360), (520, 360), (560, 360), (640, 360), (480, 400), (640, 400), (440, 440), (480, 440), (560, 440), (640, 440), (560, 480)]
room9_list2 = [(480, 0)]
room9_list3 = [(480, 360), (560, 360), (600, 360), (640, 360), (480, 400), (640, 400), (480, 440), (520, 440), (640, 440), (640, 480)]
room9_list4 = [(440, 360), (480, 360), (560, 360), (600, 360), (440, 440), (480, 440), (560, 440), (600, 440)]
room9_list5 = [(440, 320), (480, 320), (560, 320), (600, 320), (640, 320), (440, 360), (480, 360), (560, 360), (640, 360), (640, 400), (440, 440), (480, 440), (560, 440), (600, 440), (640, 440), (440, 480), (640, 480)]
room9_list6 = [(360, 360), (440, 360), (480, 360), (560, 360), (360, 440), (400, 440), (480, 440), (520, 440), (560, 440)]
room_lists9 = [room9_list1, room9_list2, room9_list3, room9_list4, room9_list5, room9_list6]
room_list9 = random.choice(room_lists9)

### Predesigned maps ###
global wall_listmap 
wall_listmap = []
global wall_list
wall_list = []
wall_list1 = [(40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (40, 40), (200, 40), (600, 40), (40, 80), (200, 80), (240, 80), (280, 80), (320, 80), (360, 80), (400, 80), (440, 80), (600, 80), (40, 120), (600, 120), (40, 160), (200, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (440, 160), (480, 160), (600, 160), (40, 200), (200, 200), (480, 200), (600, 200), (40, 240), (200, 240), (480, 240), (600, 240), (200, 280), (240, 280), (440, 280), (480, 280), (600, 280), (40, 320), (280, 320), (400, 320), (600, 320), (40, 360), (600, 360), (40, 400), (80, 400), (120, 400), (160, 400), (240, 400), (280, 400), (440, 400), (480, 400), (520, 400), (600, 400), (40, 440), (280, 440), (440, 440), (600, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480)]
wall_list2 = [(40,40),(40,80),(40,120),(40,160),(40,200),(40,240),(40,320),(40,360),(40,400),(40,440),(200,400),(240,320),(120,40),(240,240),(120,120),(120,160),(120,200),(120,240),(120,320),(120,360),(120,440),(80,320),(120,400),(120,320)]
wall_list3 = [(160,40),(200,80),(240,120),(280,160),(320,200),(360,240),(400,320),(440,360),(480,400),(520,440),(200,400),(240,320),(120,40),(240,240),(120,120),(120,160),(120,200),(120,240),(120,320),(120,360),(120,440),(80,320),(120,400),(120,320)]
wall_list4 = [(240,40),(240,80),(240,120),(240,160),(240,200),(240,240),(240,320),(240,360),(240,400),(240,440),(200,400),(240,320),(120,40),(240,240),(120,120),(120,160),(120,200),(120,240),(120,320),(120,360),(120,440),(80,320),(120,400),(120,320)]
wall_list5 = [(320,40),(320,80),(320,120),(320,160),(320,200),(320,240),(320,320),(320,360),(40,400),(40,440),(200,400),(240,320),(120,40),(240,240),(120,120),(120,160),(120,200),(120,240),(120,320),(120,360),(120,440),(80,320),(120,400),(120,320)]
wall_list6 = [(440,40),(440,80),(440,120),(440,160),(440,200),(440,240),(440,320),(440,360),(40,400),(40,440),(200,400),(240,320),(120,40),(240,240),(120,120),(120,160),(120,200),(120,240),(120,320),(120,360),(120,440),(80,320),(120,400),(120,320)]
wall_list7 = [(440,240),(440,280),(440,200),(440,320),(440,360),(440,400),(440,440),(440,480),(200,400),(200,440),(240,400),(240,320),(120,240),(240,240),(120,320),(120,360),(120,280),(120,400),(120,320),(120,360),(120,440),(80,440),(120,480),(120,40)]
wall_list8 = [(240,40),(240,80),(240,120),(240,160),(240,200),(240,240),(240,320),(240,360),(240,400),(240,440),(200,400),(240,360),(400,40),(400,240),(360,120),(360,160),(320,200),(320,240),(320,320),(320,360),(320,440),(320,360),(320,400),(320,360)]
wall_list9 = [(320,40),(320,80),(320,120),(320,160),(320,200),(320,240),(320,320),(320,360),(40,400),(40,440),(200,40),(240,120),(120,440),(240,240),(120,320),(120,360),(120,200),(120,240),(120,320),(120,360),(120,440),(80,320),(120,400),(120,320)]
wall_list0 = [(440,40),(440,80),(440,120),(440,160),(440,200),(440,240),(440,320),(440,360),(40,400),(40,440),(200,40),(240,320),(120,240),(240,40),(120,320),(120,360),(120,200),(120,240),(120,320),(120,360),(120,440),(80,320),(120,400),(120,320)]
wall_list10 = [(120,40),(360,40),(600,40),(120,0),(160,0),(200,0),(240,0),(280,0),(320,0),(360,0),(400,0),(440,0),(480,0),(520,0),(560,0),(600,0),(120,80),(360,80),(600,80),(120,120),(360,120),(600,120),(120,160),(160,160),(200,160),(240,160),(320,160),(360,160),(400,160),(440,160),(520,160),(560,160),(600,160),(240,200),(240,240),(520,200),(520,240),(240,320),(240,360),(520,320),(520,360),(120,400),(160,400),(200,400),(240,400),(320,400),(360,400),(400,400),(440,400),(520,400),(560,400),(600,400),(120,440),(240,160),(400,440),(600,440),(120,480),(400,480),(600,480),(120,480),(160,480),(200,480),(240,480),(280,480),(320,480),(360,480),(400,480),(440,480),(480,480),(520,480),(560,480),(600,480)]
wall_list11 = [(200,40),(240,40),(280,40),(320,40),(360,40),(400,40),(440,40),(480,40),(520,40),(560,40),(600,40),(200,80),(360,80),(480,80),(600,80),(80,120),(120,120),(160,120),(200,120),(600,120),(80,160),(360,160),(480,160),(600,160),(80,200),(200,200),(360,200),(480,200),(520,200),(560,200),(600,200),(80,240),(160,240),(200,240),(240,240),(280,240),(320,240),(360,240),(400,240),(480,240),(600,240),(200,280), (360,280),(480,280),(600,280),(200,320),(600,320),(200,360),(360,360),(480,360),(600,360),(200,400),(360,400),(480,400),(600,400),(200,440),(240,440),(280,440),(320,440),(360,440),(480,440),(520,440),(560,440),(600,440),(200,520),(240,520),(280,520),(320,520),(360,520),(400,520),(440,520),(560,520),(520,520),(600,520)]
wall_list12 = [(200,40),(240,40),(280,40),(320,40),(360,40),(400,40),(440,40),(480,40),(520,40),(560,40),(600,40),(200,80),(360,80),(480,80),(600,80),(80,120),(120,120),(160,120),(200,120),(600,120),(80,160),(360,160),(480,160),(600,160),(80,200),(200,200),(360,200),(480,200),(520,200),(560,200),(600,200),(80,240),(160,240),(200,240),(240,240),(280,240),(320,240),(360,240),(400,240),(480,240),(600,240)]
wall_list13 = [(200,40),(240,40),(280,40),(320,40),(360,40),(400,40),(440,40),(480,40),(520,40),(560,40),(600,40),(200,80),(360,80),(480,80),(600,80),(200,120),(600,120),(360,160),(480,160),(600,160),(200,200),(360,200),(480,200),(520,200),(560,200),(600,200),(200,240),(240,240),(280,240),(320,240),(360,240),(400,240),(480,240),(600,240),(200,280), (360,280),(480,280),(600,280),(200,320),(600,320),(200,360),(360,360),(480,360),(600,360),(200,400),(360,400),(480,400),(600,400),(200,440),(240,440),(280,440),(320,440),(360,440),(480,440),(520,440),(560,440),(600,440),(200,520),(240,520),(280,520),(320,520),(360,520),(400,520),(440,520),(560,520),(520,520),(600,520)]
wall_list14 = [(40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (40, 40), (240, 40), (400, 40), (600, 40), (40, 80), (240, 80), (600, 80), (40, 120), (80, 120), (120, 120), (240, 120), (400, 120), (440, 120), (520, 120), (560, 120), (600, 120), (240, 160), (600, 160), (240, 200), (600, 200), (240, 240), (600, 240), (240, 280), (600, 280), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (40, 360), (280, 360), (600, 360), (40, 400), (600, 400), (40, 440), (280, 440), (600, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480)]
wall_list15 = [(40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (40, 40), (240, 40), (400, 40), (600, 40), (40, 80), (240, 80), (600, 80), (40, 120), (80, 120), (120, 120), (240, 120), (400, 120), (440, 120),  (520, 120), (560, 120), (600, 120), (40, 160), (240, 160), (600, 160), (40, 200), (80, 200), (120, 200), (160, 200), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (600, 200), (120, 240), (360, 240), (600, 240), (120, 280), (200, 280), (560, 280), (40, 320), (120, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (40, 360), (120, 360), (280, 360), (600, 360), (40, 400), (120, 400), (160, 400), (200, 400), (240, 400), (280, 400), (320, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (600, 400), (40, 440), (600, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480)]
wall_list16 = [(40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (40, 40), (400, 40), (600, 40), (40, 80), (240, 80), (600, 80), (40, 120), (80, 120), (120, 120), (240, 120), (400, 120), (440, 120), (520, 120), (560, 120), (600, 120), (40, 160), (240, 160), (600, 160), (40, 200), (80, 200), (120, 200), (160, 200), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (480, 200), (520, 200), (600, 200), (120, 240), (360, 240), (520, 240), (600, 240), (120, 280), (200, 280), (440, 280), (600, 280), (40, 320), (120, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (40, 360), (120, 360), (280, 360), (600, 360), (40, 400), (120, 400), (160, 400), (200, 400), (240, 400), (280, 400), (320, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (600, 400), (40, 440), (600, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480)]
wall_list17 = [(40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (40, 40), (600, 40), (40, 80), (120, 80), (240, 80), (400, 80), (600, 80), (40, 120), (120, 120), (240, 120), (320, 120), (400, 120), (440, 120), (520, 120), (560, 120), (600, 120), (120, 160), (240, 160), (600, 160), (120, 200), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (440, 200), (480, 200), (520, 200), (600, 200), (120, 240), (360, 240), (520, 240), (600, 240), (120, 280), (200, 280), (440, 280), (600, 280), (40, 320), (80, 320), (120, 320), (160, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (40, 360), (120, 360), (280, 360), (600, 360), (40, 400), (120, 400), (160, 400), (200, 400), (240, 400), (280, 400), (320, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (600, 400), (40, 440), (120, 440), (280, 440), (440, 440), (600, 440), (40, 480), (200, 480), (360, 480), (520, 480)]
wall_list18 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (160, 40), (480, 40), (640, 40), (0, 80), (160, 80), (200, 80), (240, 80), (280, 80), (360, 80), (400, 80), (440, 80), (480, 80), (640, 80), (0, 120), (160, 120), (640, 120), (0, 160), (160, 160), (200, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (440, 160), (480, 160), (640, 160), (0, 200), (200, 200), (480, 200), (640, 200), (0, 240), (200, 240), (480, 240), (640, 240), (0, 280), (200, 280), (240, 280), (440, 280), (480, 280), (520, 280), (640, 280), (0, 320), (640, 320), (0, 360), (520, 360), (640, 360), (0, 400), (40, 400), (80, 400), (120, 400), (160, 400), (200, 400), (240, 400), (280, 400), (320, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (640, 400), (0, 440), (640, 440), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480), (640, 480)]
wall_list19 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (640, 40), (0, 80), (40, 80), (120, 80), (160, 80), (200, 80), (240, 80), (280, 80), (320, 80), (360, 80), (400, 80), (440, 80), (480, 80), (520, 80), (560, 80), (640, 80), (0, 120), (120, 120), (560, 120), (640, 120), (0, 160), (80, 160), (120, 160), (200, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (440, 160), (480, 160), (560, 160), (640, 160), (0, 200), (120, 200), (200, 200), (480, 200), (560, 200), (640, 200), (0, 240), (40, 240), (80, 240), (120, 240), (200, 240), (280, 240), (320, 240), (360, 240), (400, 240), (480, 240), (640, 240), (0, 280), (120, 280), (200, 280), (400, 280), (480, 280), (520, 280), (560, 280), (640, 280), (0, 320), (40, 320), (120, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (400, 320), (480, 320), (560, 320), (640, 320), (0, 360), (120, 360), (560, 360), (640, 360), (0, 400), (80, 400), (120, 400), (160, 400), (200, 400), (240, 400), (280, 400), (320, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (560, 400), (640, 400), (0, 440), (640, 440), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480), (640, 480)]
wall_list20 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (640, 40), (0, 80), (40, 80), (120, 80), (160, 80), (200, 80), (240, 80), (280, 80), (320, 80), (360, 80), (400, 80), (440, 80), (480, 80), (520, 80), (560, 80), (640, 80), (0, 120), (120, 120), (560, 120), (640, 120), (0, 160), (80, 160), (120, 160), (160, 160), (200, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (440, 160), (480, 160), (560, 160), (640, 160), (0, 200), (200, 200), (480, 200), (560, 200), (640, 200), (0, 240), (40, 240), (80, 240), (120, 240), (200, 240), (280, 240), (320, 240), (360, 240), (400, 240), (480, 240), (640, 240), (0, 280), (120, 280), (200, 280), (400, 280), (480, 280), (520, 280), (560, 280), (640, 280), (0, 320), (40, 320), (120, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (400, 320), (480, 320), (560, 320), (640, 320), (0, 360), (120, 360), (560, 360), (640, 360), (0, 400), (80, 400), (120, 400), (160, 400), (200, 400), (240, 400), (280, 400), (320, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (560, 400), (640, 400), (0, 440), (640, 440), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480), (640, 480)]
wall_list21 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (640, 40), (0, 80), (80, 80), (120, 80), (200, 80), (240, 80), (280, 80), (320, 80), (360, 80), (400, 80), (440, 80), (480, 80), (520, 80), (560, 80), (640, 80), (0, 120), (80, 120), (640, 120), (0, 160), (80, 160), (120, 160), (160, 160), (200, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (200, 200), (480, 200), (640, 200), (0, 240), (40, 240), (80, 240), (120, 240), (200, 240), (280, 240), (320, 240), (360, 240), (400, 240), (480, 240), (560, 240), (640, 240), (120, 280), (200, 280), (280, 280), (480, 280), (560, 280), (640, 280), (120, 320), (280, 320), (360, 320), (480, 320), (560, 320), (640, 320), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (240, 360), (280, 360), (360, 360), (400, 360), (440, 360), (480, 360), (560, 360), (640, 360), (40, 400), (560, 400), (640, 400), (40, 440), (80, 440), (120, 440), (160, 440), (200, 440), (240, 440), (280, 440), (320, 440), (360, 440), (400, 440), (440, 440), (480, 440), (520, 440), (560, 440), (640, 440), (640, 480)]
wall_list22 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (640, 40), (0, 80), (80, 80), (120, 80), (200, 80), (240, 80), (280, 80), (360, 80), (400, 80), (440, 80), (480, 80), (520, 80), (560, 80), (640, 80), (0, 120), (80, 120), (640, 120), (0, 160), (80, 160), (120, 160), (160, 160), (200, 160), (240, 160), (280, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (200, 200), (480, 200), (640, 200), (0, 240), (40, 240), (80, 240), (120, 240), (200, 240), (280, 240), (360, 240), (400, 240), (480, 240), (560, 240), (640, 240), (0, 280), (120, 280), (200, 280), (280, 280), (360, 280), (480, 280), (560, 280), (640, 280), (0, 320), (120, 320), (280, 320), (360, 320), (480, 320), (560, 320), (640, 320), (0, 360), (80, 360), (120, 360), (160, 360), (200, 360), (240, 360), (280, 360), (360, 360), (400, 360), (440, 360), (480, 360), (560, 360), (640, 360), (0, 400), (560, 400), (640, 400), (0, 440), (80, 440), (120, 440), (160, 440), (200, 440), (240, 440), (280, 440), (360, 440), (400, 440), (440, 440), (480, 440), (520, 440), (560, 440), (640, 440), (0, 480), (640, 480)]
wall_list23 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (640, 40), (0, 80), (80, 80), (120, 80), (200, 80), (240, 80), (280, 80), (360, 80), (400, 80), (440, 80), (520, 80), (560, 80), (640, 80), (0, 120), (80, 120), (560, 120), (640, 120), (0, 160), (80, 160), (120, 160), (160, 160), (200, 160), (240, 160), (280, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (200, 200), (480, 200), (640, 200), (0, 240), (40, 240), (80, 240), (120, 240), (200, 240), (280, 240), (360, 240), (400, 240), (480, 240), (560, 240), (600, 240), (640, 240), (0, 280), (120, 280), (200, 280), (280, 280), (360, 280), (480, 280), (640, 280), (0, 320), (120, 320), (200, 320), (280, 320), (360, 320), (560, 320), (640, 320), (0, 360), (80, 360), (120, 360), (160, 360), (200, 360), (240, 360), (280, 360), (360, 360), (400, 360), (440, 360), (480, 360), (520, 360), (560, 360), (640, 360), (0, 400), (80, 400), (560, 400), (640, 400), (0, 440), (80, 440), (120, 440), (160, 440), (200, 440), (240, 440), (280, 440), (360, 440), (400, 440), (440, 440), (480, 440), (520, 440), (560, 440), (640, 440), (0, 480), (640, 480)]
wall_list24 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (640, 40), (0, 80), (80, 80), (120, 80), (160, 80), (200, 80), (240, 80), (280, 80), (360, 80), (400, 80), (440, 80), (480, 80), (520, 80), (560, 80), (640, 80), (0, 120), (80, 120), (560, 120), (640, 120), (0, 160), (80, 160), (120, 160), (160, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (120, 200), (560, 200), (640, 200), (0, 240), (120, 240), (560, 240), (640, 240), (0, 280), (120, 280), (560, 280), (640, 280), (0, 320), (120, 320), (560, 320), (640, 320), (0, 360), (80, 360), (120, 360), (160, 360), (240, 360), (280, 360), (320, 360), (360, 360), (400, 360), (480, 360), (520, 360), (560, 360), (640, 360), (0, 400), (80, 400), (560, 400), (640, 400), (0, 440), (80, 440), (120, 440), (160, 440), (200, 440), (240, 440), (280, 440), (360, 440), (400, 440), (440, 440), (480, 440), (520, 440), (560, 440), (640, 440), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480), (640, 480)]
wall_list25 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (640, 40), (0, 80), (80, 80), (120, 80), (160, 80), (200, 80), (240, 80), (280, 80), (360, 80), (400, 80), (440, 80), (480, 80), (520, 80), (560, 80), (640, 80), (0, 120), (80, 120), (560, 120), (640, 120), (0, 160), (80, 160), (120, 160), (160, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (120, 200), (520, 200), (640, 200), (0, 240), (120, 240), (520, 240), (640, 240), (0, 280), (120, 280), (520, 280), (640, 280), (0, 320), (120, 320), (520, 320), (640, 320), (0, 360), (80, 360), (120, 360), (160, 360), (240, 360), (280, 360), (320, 360), (360, 360), (400, 360), (480, 360), (520, 360), (560, 360), (640, 360), (0, 400), (80, 400), (560, 400), (640, 400), (0, 440), (80, 440), (120, 440), (160, 440), (200, 440), (240, 440), (280, 440), (360, 440), (400, 440), (440, 440), (480, 440), (520, 440), (560, 440), (640, 440), (0, 480), (640, 480)]
wall_list26 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (280, 40), (480, 40), (640, 40), (0, 80), (80, 80), (120, 80), (160, 80), (200, 80), (280, 80), (360, 80), (400, 80), (480, 80), (560, 80), (640, 80), (0, 120), (80, 120), (280, 120), (400, 120), (560, 120), (640, 120), (0, 160), (80, 160), (120, 160), (200, 160), (240, 160), (280, 160), (320, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (120, 200), (200, 200), (520, 200), (640, 200), (0, 240), (120, 240), (200, 240), (240, 240), (280, 240), (320, 240), (360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (600, 240), (640, 240), (0, 280), (120, 280), (200, 280), (360, 280), (520, 280), (640, 280), (0, 320), (120, 320), (280, 320), (360, 320), (440, 320), (640, 320), (0, 360), (80, 360), (120, 360), (160, 360), (200, 360), (240, 360), (280, 360), (360, 360), (440, 360), (480, 360), (520, 360), (560, 360), (600, 360), (640, 360), (0, 400), (80, 400), (360, 400), (640, 400), (0, 440), (80, 440), (160, 440), (200, 440), (240, 440), (280, 440), (320, 440), (360, 440), (400, 440), (440, 440), (480, 440), (520, 440), (560, 440), (640, 440), (0, 480), (80, 480), (640, 480)]
wall_list27 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (280, 40), (480, 40), (640, 40), (0, 80), (80, 80), (120, 80), (160, 80), (200, 80), (280, 80), (360, 80), (400, 80), (480, 80), (560, 80), (640, 80), (0, 120), (80, 120), (280, 120), (400, 120), (560, 120), (640, 120), (0, 160), (80, 160), (120, 160), (200, 160), (240, 160), (280, 160), (320, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (120, 200), (200, 200), (520, 200), (640, 200), (0, 240), (120, 240), (200, 240), (240, 240), (280, 240), (320, 240), (360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (600, 240), (640, 240), (0, 280), (120, 280), (200, 280), (360, 280), (520, 280), (640, 280), (0, 320), (120, 320), (280, 320), (360, 320), (440, 320), (640, 320), (0, 360), (80, 360), (120, 360), (160, 360), (200, 360), (240, 360), (280, 360), (360, 360), (440, 360), (480, 360), (520, 360), (560, 360), (600, 360), (640, 360), (0, 400), (80, 400), (360, 400), (640, 400), (0, 440), (80, 440), (160, 440), (200, 440), (240, 440), (280, 440), (320, 440), (360, 440), (400, 440), (440, 440), (480, 440), (520, 440), (560, 440), (640, 440), (0, 480), (40, 480), (80, 480), (640, 480)]
wall_list28 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (480, 40), (640, 40), (0, 80), (80, 80), (160, 80), (200, 80), (240, 80), (280, 80), (360, 80), (400, 80), (480, 80), (560, 80), (640, 80), (0, 120), (80, 120), (280, 120), (360, 120), (400, 120), (480, 120), (560, 120), (640, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (240, 160), (280, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (600, 160), (640, 160), (640, 200), (200, 240), (240, 240), (280, 240), (320, 240), (360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (600, 240), (640, 240), (440, 280), (640, 280), (440, 320), (640, 320), (0, 360), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (240, 360), (280, 360), (360, 360), (440, 360), (480, 360), (520, 360), (560, 360), (600, 360), (640, 360), (0, 400), (280, 400), (360, 400), (440, 400), (640, 400), (0, 440), (360, 440), (640, 440), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480), (640, 480)]
wall_list29 = [(80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (80, 40), (480, 40), (640, 40), (80, 80), (120, 80), (160, 80), (200, 80), (280, 80), (360, 80), (400, 80), (480, 80), (560, 80), (640, 80), (80, 120), (280, 120), (360, 120), (560, 120), (640, 120), (80, 160), (120, 160), (160, 160), (200, 160), (240, 160), (280, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (600, 160), (640, 160), (80, 200), (640, 200), (80, 240), (120, 240), (200, 240), (240, 240), (320, 240), (360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (600, 240), (640, 240), (120, 280), (200, 280), (440, 280), (640, 280), (120, 320), (200, 320), (440, 320), (640, 320), (120, 360), (200, 360), (240, 360), (280, 360), (320, 360), (360, 360), (440, 360), (480, 360), (520, 360), (560, 360), (600, 360), (640, 360), (120, 400), (200, 400), (280, 400), (360, 400), (640, 400), (360, 440), (640, 440), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480), (640, 480)]
wall_list30 = [(40, 80), (120, 80), (160, 80), (200, 80), (240, 80), (280, 80), (360, 80), (400, 80), (440, 80), (480, 80), (520, 80), (600, 80), (40, 120), (600, 120), (120, 160), (160, 160), (200, 160), (240, 160), (280, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (40, 200), (120, 200), (520, 200), (600, 200), (120, 240), (520, 240), (120, 280), (520, 280), (600, 280), (120, 320), (160, 320), (200, 320), (240, 320), (280, 320), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (40, 360), (600, 360), (40, 400), (120, 400), (160, 400), (200, 400), (240, 400), (280, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (600, 400)]
wall_list31 = [(40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (40, 40), (560, 40), (640, 40), (40, 80), (120, 80), (160, 80), (200, 80), (240, 80), (280, 80), (320, 80), (360, 80), (400, 80), (440, 80), (480, 80), (560, 80), (640, 80), (0, 120), (40, 120), (120, 120), (560, 120), (640, 120), (40, 160), (120, 160), (200, 160), (240, 160), (280, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (40, 200), (120, 200), (200, 200), (560, 200), (640, 200), (40, 240), (120, 240), (200, 240), (280, 240), (320, 240), (360, 240), (400, 240), (440, 240), (480, 240), (560, 240), (640, 240), (0, 280), (120, 280), (280, 280), (560, 280), (640, 280), (120, 320), (160, 320), (200, 320), (240, 320), (280, 320), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (640, 320), (120, 360), (280, 360), (640, 360), (120, 400), (160, 400), (200, 400), (280, 400), (320, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (560, 400), (600, 400), (640, 400), (120, 440), (200, 440), (280, 440), (360, 440), (440, 440), (520, 440), (640, 440), (640, 480)]
wall_list32 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (640, 40), (0, 80), (80, 80), (120, 80), (160, 80), (200, 80), (240, 80), (280, 80), (320, 80), (360, 80), (400, 80), (440, 80), (480, 80), (520, 80), (560, 80), (640, 80), (0, 120), (80, 120), (640, 120), (0, 160), (80, 160), (120, 160), (160, 160), (200, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (600, 160), (640, 160), (0, 200), (320, 200), (440, 200), (520, 200), (640, 200), (0, 240), (40, 240), (80, 240), (120, 240), (160, 240), (240, 240), (640, 240), (160, 280), (360, 280), (480, 280), (560, 280), (640, 280), (160, 320), (240, 320), (280, 320), (320, 320), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (640, 320), (40, 360), (160, 360), (640, 360), (40, 400), (80, 400), (120, 400), (160, 400), (200, 400), (240, 400), (280, 400), (320, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (560, 400), (640, 400), (640, 440), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480), (640, 480)]
wall_list33 = [(120, 40), (160, 40), (200, 40), (240, 40), (280, 40), (320, 40), (360, 40), (400, 40), (440, 40), (480, 40), (520, 40), (560, 40), (120, 80), (560, 80), (120, 120), (200, 120), (240, 120), (280, 120), (320, 120), (360, 120), (400, 120), (440, 120), (480, 120), (560, 120), (120, 160), (200, 160), (480, 160), (560, 160), (120, 200), (200, 200), (280, 200), (320, 200), (360, 200), (400, 200), (480, 200), (560, 200), (200, 240), (280, 240), (400, 240), (560, 240), (120, 280), (200, 280), (280, 280), (360, 280), (400, 280), (480, 280), (560, 280), (120, 320), (200, 320), (480, 320), (560, 320), (120, 360), (200, 360), (240, 360), (280, 360), (320, 360), (360, 360), (400, 360), (440, 360), (480, 360), (560, 360), (120, 400), (560, 400), (120, 440), (160, 440), (200, 440), (240, 440), (280, 440), (320, 440), (360, 440), (400, 440), (440, 440), (480, 440), (520, 440), (560, 440)]
wall_list34 = [(40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (0, 40), (40, 40), (560, 40), (640, 40), (40, 80), (120, 80), (160, 80), (200, 80), (240, 80), (280, 80), (320, 80), (360, 80), (400, 80), (440, 80), (480, 80), (560, 80), (640, 80), (0, 120), (40, 120), (120, 120), (560, 120), (640, 120), (40, 160), (120, 160), (200, 160), (240, 160), (280, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (40, 200), (120, 200), (200, 200), (560, 200), (640, 200), (40, 240), (120, 240), (200, 240), (280, 240), (320, 240), (360, 240), (400, 240), (440, 240), (480, 240), (560, 240), (640, 240), (0, 280), (120, 280), (280, 280), (560, 280), (640, 280), (120, 320), (160, 320), (200, 320), (240, 320), (280, 320), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (640, 320), (120, 360), (280, 360), (640, 360), (120, 400), (160, 400), (200, 400), (280, 400), (320, 400), (360, 400), (400, 400), (440, 400), (480, 400), (520, 400), (560, 400), (600, 400), (640, 400), (120, 440), (200, 440), (280, 440), (360, 440), (440, 440), (520, 440), (640, 440), (640, 480)]
wall_list35 = [(0, 0), (40, 0), (80, 0), (120, 0), (160, 0), (200, 0), (240, 0), (280, 0), (320, 0), (360, 0), (400, 0), (440, 0), (480, 0), (520, 0), (560, 0), (600, 0), (640, 0), (640, 40), (40, 80), (120, 80), (160, 80), (200, 80), (240, 80), (280, 80), (320, 80), (360, 80), (400, 80), (440, 80), (480, 80), (560, 80), (640, 80), (40, 120), (80, 120), (120, 120), (560, 120), (640, 120), (120, 160), (200, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (440, 160), (480, 160), (520, 160), (560, 160), (640, 160), (0, 200), (40, 200), (120, 200), (200, 200), (560, 200), (640, 200), (120, 240), (320, 240), (360, 240), (560, 240), (640, 240), (120, 280), (280, 280), (320, 280), (360, 280), (400, 280), (560, 280), (640, 280), (0, 320), (40, 320), (80, 320), (120, 320), (240, 320), (280, 320), (360, 320), (440, 320), (640, 320), (200, 360), (440, 360), (480, 360), (640, 360), (160, 400), (320, 400), (360, 400), (440, 400), (480, 400), (520, 400), (640, 400), (80, 440), (280, 440), (600, 440), (640, 440), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 480), (280, 480), (320, 480), (360, 480), (400, 480), (440, 480), (480, 480), (520, 480), (560, 480), (600, 480), (640, 480)]
wall_list36 = [(600, 80), (40, 120), (600, 120), (40, 160), (320, 280), (360, 280), (400, 280), (440, 280), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (240, 200), (240, 240), (240, 280), (200, 200), (240, 200), (280, 200), (320, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (400, 280), (440, 280), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (560, 280), (400, 320), (440, 320), (520, 320), (560, 320), (600, 400), (40, 440), (600, 440), (40, 480), (40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (200, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (600, 400), (40, 440), (600, 440), (40, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list37 = [(600, 80), (40, 120), (600, 120), (40, 160), (600, 280), (40, 220), (600, 220), (40, 260), (600, 400), (40, 440), (600, 440), (40, 480), (0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (240, 200), (240, 240), (240, 280), (200, 200), (240, 200), (280, 200), (320, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (400, 280), (440, 280), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (600, 80), (40, 120), (600, 120), (40, 160), (600, 400), (40, 440), (600, 440), (40, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list38 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (80, 200), (120, 200), (160, 200), (200, 200), (600, 400), (40, 440), (600, 440), (40, 480), (0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (240, 240), (640, 240), (320, 280), (640, 280), (0, 320), (40, 320), (80, 320), (120, 320), (160, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (600, 320), (640, 320), (40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (600, 320), (640, 320), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 440), (240, 440), (0, 480), (40, 480), (80, 480), (160, 480), (200, 480), (240, 480), (40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (200, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list39 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (600, 280), (40, 220), (600, 220), (40, 260), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (440, 200), (480, 200), (520, 200), (560, 200), (40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (560, 280), (400, 320), (440, 320), (520, 320), (560, 320), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list40 = [(600, 80), (40, 120), (600, 120), (40, 160), (600, 280), (40, 220), (600, 220), (40, 260), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (440, 200), (480, 200), (520, 200), (560, 200), (600, 80), (40, 120), (600, 120), (40, 160), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (560, 280), (400, 320), (440, 320), (520, 320), (560, 320), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list41 = [(600, 80), (40, 120), (600, 120), (40, 160), (600, 280), (40, 220), (600, 220), (40, 260), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (0, 200), (40, 200), (80, 200), (160, 200), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (480, 200), (520, 200), (560, 200), (600, 200), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (400, 320), (480, 320), (520, 320), (560, 320), (600, 320), (600, 80), (40, 120), (600, 120), (40, 160), (360, 240), (400, 240), (480, 240), (520, 240), (560, 240), (600, 240), (640, 240), (640, 280), (360, 320), (400, 320), (480, 320), (520, 320), (560, 320), (640, 320), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (600, 80), (40, 120), (600, 120), (40, 160), (600, 400), (40, 440), (600, 440), (40, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list42 = [(600, 80), (40, 120), (600, 120), (40, 160), (600, 200), (40, 240), (200, 240), (600, 240), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (0, 200), (40, 200), (80, 200), (160, 200), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (480, 200), (520, 200), (560, 200), (600, 200), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (280, 320), (320, 320), (360, 320), (400, 320), (480, 320), (520, 320), (560, 320), (600, 320), (600, 80), (40, 120), (600, 120), (40, 160), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (600, 320), (640, 320), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (600, 80), (40, 120), (600, 120), (40, 160), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list43 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (600, 280), (40, 220), (600, 220), (40, 260), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (240, 200), (240, 240), (240, 280), (40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (560, 240), (640, 240), (640, 280), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (640, 320), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list44 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160), (600, 200), (40, 240), (200, 240), (600, 240), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (240, 200), (240, 240), (240, 280), (0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160), (360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (560, 240), (640, 240), (640, 280), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (640, 320), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160), (600, 400), (40, 440), (600, 440), (40, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list45 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (320, 280), (360, 280), (400, 280), (440, 280), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (0, 200), (40, 200), (80, 200), (120, 200), (160, 200), (240, 200), (240, 240), (240, 280), (40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (440, 240), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (640, 320), (600, 400), (40, 440), (600, 440), (40, 480), (40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (200, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (600, 400), (40, 440), (600, 440), (40, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list46 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (440, 200), (480, 200), (520, 200), (560, 200), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 240), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (600, 320), (640, 320), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (200, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list47 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160), (40, 280), (200, 280), (240, 280), (280, 280), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (360, 280), (400, 280), (440, 280), (360, 240), (400, 240), (480, 240), (520, 240), (560, 240), (600, 240), (640, 240), (640, 280), (360, 320), (400, 320), (480, 320), (520, 320), (560, 320), (640, 320), (600, 400), (40, 440), (600, 440), (40, 480), (600, 80), (40, 120), (600, 120), (40, 160), (600, 400), (40, 440), (600, 440), (40, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list48 = [(40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (200, 120), (40, 160), (80, 160), (160, 160), (200, 160), (440, 200), (480, 200), (520, 200), (560, 200), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 240), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (360, 240), (400, 240), (480, 240), (520, 240), (560, 240), (600, 240), (640, 240), (640, 280), (360, 320), (400, 320), (480, 320), (520, 320), (560, 320), (640, 320), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (600, 80), (40, 120), (600, 120), (40, 160), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 440), (240, 440), (0, 480), (40, 480), (80, 480), (160, 480), (200, 480), (240, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list49 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160), (440, 200), (480, 200), (520, 200), (560, 200), (600, 400), (40, 440), (600, 440), (40, 480), (600, 400), (40, 440), (600, 440), (40, 480), (200, 200), (240, 200), (280, 200), (320, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (400, 280), (440, 280), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (440, 240), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (640, 320), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160), (600, 400), (40, 440), (600, 440), (40, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list50 = [(40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (200, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (320, 280), (360, 280), (400, 280), (440, 280), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 160), (280, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 280), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (560, 280), (400, 320), (440, 320), (520, 320), (560, 320), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (200, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list51 = [(600, 80), (40, 120), (600, 120), (40, 160), (80, 200), (120, 200), (160, 200), (200, 200), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 240), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (560, 240), (640, 240), (640, 280), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (640, 320), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list52 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (80, 200), (120, 200), (160, 200), (200, 200), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (360, 280), (400, 280), (440, 280), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list53 = [(40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (200, 120), (40, 160), (80, 160), (160, 160), (200, 160), (320, 280), (360, 280), (400, 280), (440, 280), (600, 400), (40, 440), (600, 440), (40, 480), (600, 400), (40, 440), (600, 440), (40, 480), (240, 160), (320, 160), (360, 160), (240, 200), (240, 240), (320, 240), (320, 280), (240, 320), (280, 320), (320, 320), (400, 320), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (440, 240), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (640, 320), (600, 400), (40, 440), (600, 440), (40, 480), (40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (200, 120), (40, 160), (80, 160), (160, 160), (200, 160), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list54 = [(600, 80), (40, 120), (600, 120), (40, 160), (80, 200), (120, 200), (160, 200), (200, 200), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 240), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (360, 240), (400, 240), (480, 240), (520, 240), (560, 240), (600, 240), (640, 240), (640, 280), (360, 320), (400, 320), (480, 320), (520, 320), (560, 320), (640, 320), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (600, 80), (40, 120), (600, 120), (40, 160), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 440), (240, 440), (0, 480), (40, 480), (80, 480), (160, 480), (200, 480), (240, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list55 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (440, 200), (480, 200), (520, 200), (560, 200), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 160), (280, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 280), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (200, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list56 = [(600, 80), (40, 120), (600, 120), (40, 160), (600, 280), (40, 220), (600, 220), (40, 260), (600, 400), (40, 440), (600, 440), (40, 480), (600, 400), (40, 440), (600, 440), (40, 480), (240, 160), (320, 160), (360, 160), (240, 200), (240, 240), (320, 240), (320, 280), (240, 320), (280, 320), (320, 320), (400, 320), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (560, 280), (400, 320), (440, 320), (520, 320), (560, 320), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 440), (240, 440), (0, 480), (40, 480), (80, 480), (160, 480), (200, 480), (240, 480), (0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 440), (240, 440), (0, 480), (40, 480), (80, 480), (160, 480), (200, 480), (240, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list57 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160), (440, 200), (480, 200), (520, 200), (560, 200), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (240, 160), (320, 160), (360, 160), (240, 200), (240, 240), (320, 240), (320, 280), (240, 320), (280, 320), (320, 320), (400, 320), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (40, 360), (80, 360), (120, 360), (160, 360), (240, 360), (40, 440), (80, 440), (120, 440), (160, 440), (240, 440), (40, 80), (360, 360), (440, 360), (480, 360), (560, 360), (360, 440), (400, 440), (480, 440), (520, 440), (560, 440), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list58 = [(40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (200, 120), (40, 160), (80, 160), (160, 160), (200, 160), (80, 200), (120, 200), (160, 200), (200, 200), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (200, 200), (240, 200), (280, 200), (320, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (400, 280), (440, 280), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (0, 360), (80, 360), (120, 360), (160, 360), (240, 360), (80, 400), (240, 400), (40, 440), (80, 440), (160, 440), (240, 440), (160, 480), (320, 80), (440, 320), (480, 320), (560, 320), (600, 320), (640, 320), (440, 360), (480, 360), (560, 360), (640, 360), (640, 400), (440, 440), (480, 440), (560, 440), (600, 440), (640, 440), (440, 480), (640, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list59 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (360, 280), (400, 280), (440, 280), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (560, 280), (400, 320), (440, 320), (520, 320), (560, 320), (440, 0), (320, 80), (440, 360), (480, 360), (560, 360), (600, 360), (440, 440), (480, 440), (560, 440), (600, 440), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list60 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (600, 400), (40, 440), (600, 440), (40, 480), (600, 400), (40, 440), (600, 440), (40, 480), (240, 160), (320, 160), (360, 160), (240, 200), (240, 240), (320, 240), (320, 280), (240, 320), (280, 320), (320, 320), (400, 320), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (440, 240), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (640, 320), (0, 360), (80, 360), (120, 360), (160, 360), (240, 360), (80, 400), (240, 400), (40, 440), (80, 440), (160, 440), (240, 440), (160, 480), (40, 80), (400, 360), (480, 360), (520, 360), (560, 360), (640, 360), (480, 400), (640, 400), (440, 440), (480, 440), (560, 440), (640, 440), (560, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list61 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (240, 160), (480, 160), (280, 200), (320, 200), (400, 200), (440, 200), (440, 240), (280, 280), (320, 280), (400, 280), (440, 280), (240, 320), (480, 320), (360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (560, 240), (640, 240), (640, 280), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (640, 320), (440, 0), (600, 0), (480, 0), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list62 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 240), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (560, 280), (400, 320), (440, 320), (520, 320), (560, 320), (40, 360), (80, 360), (120, 360), (160, 360), (240, 360), (40, 440), (80, 440), (120, 440), (160, 440), (240, 440), (440, 0), (480, 0), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list63 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 80), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (120, 160), (160, 160), (240, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 160), (320, 160), (360, 160), (240, 200), (240, 240), (320, 240), (320, 280), (240, 320), (280, 320), (320, 320), (400, 320), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (560, 280), (400, 320), (440, 320), (520, 320), (560, 320), (0, 360), (80, 360), (120, 360), (160, 360), (200, 360), (240, 360), (0, 400), (0, 440), (80, 440), (120, 440), (160, 440), (200, 440), (240, 440), (440, 0), (440, 360), (480, 360), (560, 360), (600, 360), (440, 440), (480, 440), (560, 440), (600, 440), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list64 = [(40, 40), (80, 40), (120, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (200, 120), (40, 160), (80, 160), (160, 160), (200, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (600, 400), (40, 440), (600, 440), (40, 480), (600, 400), (40, 440), (600, 440), (40, 480), (240, 160), (320, 160), (360, 160), (240, 200), (240, 240), (320, 240), (320, 280), (240, 320), (280, 320), (320, 320), (400, 320), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (600, 320), (640, 320), (0, 360), (80, 360), (120, 360), (160, 360), (240, 360), (80, 400), (240, 400), (40, 440), (80, 440), (160, 440), (240, 440), (160, 480), (440, 0), (440, 320), (480, 320), (560, 320), (600, 320), (640, 320), (440, 360), (480, 360), (560, 360), (640, 360), (640, 400), (440, 440), (480, 440), (560, 440), (600, 440), (640, 440), (440, 480), (640, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list65 = [(600, 80), (40, 120), (600, 120), (40, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (0, 320), (40, 320), (80, 320), (160, 320), (200, 320), (240, 320), (0, 360), (240, 360), (0, 400), (0, 440), (240, 480), (0, 480), (40, 480), (80, 480), (120, 480), (160, 480), (240, 480), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 240), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (360, 240), (400, 240), (440, 240), (480, 240), (520, 240), (560, 240), (640, 240), (640, 280), (360, 320), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (640, 320), (40, 360), (80, 360), (120, 360), (160, 360), (240, 360), (40, 440), (80, 440), (120, 440), (160, 440), (240, 440), (600, 80), (480, 0), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list66 = [(600, 80), (40, 120), (600, 120), (40, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (160, 480), (200, 480), (240, 160), (280, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 280), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (40, 400), (80, 400), (160, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (320, 80), (360, 360), (440, 360), (480, 360), (560, 360), (360, 440), (400, 440), (480, 440), (520, 440), (560, 440), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list67 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (360, 280), (400, 280), (440, 280), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (600, 320), (640, 320), (40, 400), (80, 400), (160, 400), (200, 400), (40, 440), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (600, 0), (440, 320), (480, 320), (560, 320), (600, 320), (640, 320), (440, 360), (480, 360), (560, 360), (640, 360), (640, 400), (440, 440), (480, 440), (560, 440), (600, 440), (640, 440), (440, 480), (640, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list68 = [(40, 40), (80, 40), (160, 40), (200, 40), (40, 80), (200, 80), (40, 120), (40, 160), (80, 160), (120, 160), (160, 160), (200, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 160), (280, 160), (320, 160), (360, 160), (400, 160), (240, 200), (400, 200), (240, 240), (400, 280), (240, 320), (280, 320), (360, 320), (400, 320), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (40, 360), (80, 360), (120, 360), (160, 360), (240, 360), (40, 440), (80, 440), (120, 440), (160, 440), (240, 440), (440, 0), (480, 0), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list69 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (120, 360), (160, 360), (200, 360), (40, 400), (200, 400), (200, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (200, 200), (240, 200), (280, 200), (320, 200), (360, 200), (400, 200), (440, 200), (200, 280), (240, 280), (280, 280), (320, 280), (360, 280), (400, 280), (440, 280), (440, 200), (480, 200), (520, 200), (600, 200), (640, 200), (440, 240), (640, 240), (640, 280), (440, 320), (480, 320), (520, 320), (560, 320), (600, 320), (640, 320), (0, 360), (80, 360), (120, 360), (160, 360), (200, 360), (240, 360), (0, 400), (0, 440), (80, 440), (120, 440), (160, 440), (200, 440), (240, 440), (440, 0), (480, 0), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_list70 = [(0, 0), (40, 0), (80, 0), (160, 0), (200, 0), (240, 0), (0, 40), (240, 40), (0, 120), (240, 120), (0, 160), (40, 160), (80, 160), (160, 160), (200, 160), (240, 160), (440, 0), (520, 0), (640, 0), (400, 40), (440, 40), (520, 40), (560, 40), (640, 40), (640, 80), (400, 120), (440, 120), (520, 120), (560, 120), (640, 120), (440, 160), (520, 160), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (40, 360), (80, 360), (160, 360), (200, 360), (40, 400), (200, 400), (40, 440), (40, 480), (80, 480), (120, 480), (160, 480), (200, 480), (240, 160), (480, 160), (280, 200), (320, 200), (400, 200), (440, 200), (440, 240), (280, 280), (320, 280), (400, 280), (440, 280), (240, 320), (480, 320), (400, 200), (440, 200), (520, 200), (560, 200), (400, 240), (560, 240), (400, 280), (400, 320), (440, 320), (480, 320), (520, 320), (560, 320), (0, 360), (80, 360), (120, 360), (160, 360), (240, 360), (80, 400), (240, 400), (40, 440), (80, 440), (160, 440), (240, 440), (160, 480), (80, 0), (440, 320), (480, 320), (560, 320), (600, 320), (640, 320), (440, 360), (480, 360), (560, 360), (640, 360), (640, 400), (440, 440), (480, 440), (560, 440), (600, 440), (640, 440), (440, 480), (640, 480), (640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
wall_lists = [wall_list1,wall_list2,wall_list3,wall_list4,wall_list5,wall_list6,wall_list7,wall_list8,wall_list9,wall_list0,wall_list10,wall_list11,wall_list12, wall_list14, wall_list15, wall_list16, wall_list17, wall_list18, wall_list19, wall_list20, wall_list21, wall_list22, wall_list23, wall_list24, wall_list25, wall_list26, wall_list27, wall_list28, wall_list29, wall_list30, wall_list31, wall_list32, wall_list33, wall_list34, wall_list35, wall_list36, wall_list37, wall_list38, wall_list39, wall_list40, wall_list41, wall_list42, wall_list43, wall_list44, wall_list45, wall_list46, wall_list47, wall_list48, wall_list49, wall_list50, wall_list51, wall_list52, wall_list53, wall_list54, wall_list55, wall_list56, wall_list57, wall_list58, wall_list59, wall_list60, wall_list61, wall_list62, wall_list63, wall_list64, wall_list65, wall_list66, wall_list67, wall_list68, wall_list69, wall_list70 ]
wall_list = random.choice(wall_lists)


### This loads the custom map.txt file as the first map ###
wall_listmap = []
ycoord = 0
xcoord = 0
myfile3 = open("map.txt", "r")
for n in range(13):
                yrow40 = myfile3.readline()
                for i in yrow40:
                        icoord = i
                        mapcoord = (xcoord, ycoord)
                        if icoord == str("W") and xcoord <= 640:
                                wall_listmap.append(mapcoord)
                        if icoord == str("T") and xcoord <= 640:
                                endx = xcoord
                                endy = ycoord
                        xcoord += 40
                xcoord = 0
                ycoord += 40
myfile3.close()
myfile4 = open("mapcoords.txt", "w")
myfile4.write("Map coordinates are:\n")
myfile4.write(str(wall_listmap))           
myfile4.close()
wall_list = wall_listmap
tile_count = 0


### Function called to load non-wall tiles into the game map before playing ###
def new_map():          
        wall_list = wall_listmap2
        tile_count = 0
        while tile_count < 50:
                random_tilex = random.randrange(40,640,40)
                random_tiley = random.randrange(40,480,40)
                map_tiles = ['grass.png','grass2.png', 'water.png']
                if game_event1 == 'Cursed':
                    map_tiles = ['walls9.png']
                img_tile = random.choice(map_tiles)
                select_tile = pygame.image.load(img_tile)
                win.blit(select_tile, (random_tilex, random_tiley))
                coords = (img_tile, random_tilex, random_tiley)       
                if (random_tilex,random_tiley) not in wall_list:
                        current_map_list.append(coords)
                tile_count += 1              
        monster_tile_count = 0
        while monster_tile_count < max_monsters:
                random_tilex = random.randrange(40,640,40)
                random_tiley = random.randrange(40,480,40)
                monster_tiles = ['Guard.png', 'Priestess.png', 'Minotaur.png', 'Undead.png','Item.png', 'Wolf.png', 'Arthropleura.png', 'Megarachne.png', 'Serpent.png', 'Hound.png', 'Griffin.png']
                monster_img_tile = random.choice(monster_tiles)
                monster_select_tile = pygame.image.load(monster_img_tile)
                win.blit(monster_select_tile, (random_tilex, random_tiley))
                monster_coords = (monster_img_tile, random_tilex, random_tiley)
                if (random_tilex,random_tiley) not in wall_list:
                        current_monster_list.append(monster_coords)
                        monster_tile_count += 1
                pygame.display.update()

### Loads player details when the game is started ####
myfile2 = open("game_save.txt", "r")
character_title = myfile2.readline()
character_name = myfile2.readline()
character_ac_title = myfile2.readline() 
character_ac = myfile2.readline()
character_hp_title = myfile2.readline() 
character_hp = myfile2.readline()
character_xp_title = myfile2.readline() 
character_xp = myfile2.readline()
character_gold_title = myfile2.readline() 
character_gold = myfile2.readline()
character_status_title = myfile2.readline() 
character_status = myfile2.readline()
character_level_title = myfile2.readline() 
character_level = myfile2.readline()
death_count_title = myfile2.readline() 
death_count = myfile2.readline()
estate_title = myfile2.readline() 
estate = myfile2.readline()
offspring_title = myfile2.readline() 
offspring = myfile2.readline()
character_history_title = myfile2.readline()
character_history = myfile2.readline()
myfile2.close()
character_ac = int(character_ac)
character_hp = int(character_hp)
character_xp = int(character_xp)
character_gold = int(character_gold)
character_level = int(character_level)
death_count = int(death_count)
estate = int(estate)
offspring = int(offspring)
max_offspring = int(offspring)

### Function to load the backup game save file ###
def load_save():
        myfile2 = open("game_save2.txt", "r")
        character_title = myfile2.readline()
        character_name = myfile2.readline()
        character_ac_title = myfile2.readline() 
        character_ac = myfile2.readline()
        character_hp_title = myfile2.readline() 
        character_hp = myfile2.readline()
        character_xp_title = myfile2.readline() 
        character_xp = myfile2.readline()
        character_gold_title = myfile2.readline() 
        character_gold = myfile2.readline()
        character_status_title = myfile2.readline() 
        character_status = myfile2.readline()
        character_level_title = myfile2.readline() 
        character_level = myfile2.readline()
        death_count_title = myfile2.readline() 
        death_count = myfile2.readline()
        estate_title = myfile2.readline() 
        estate = myfile2.readline()
        offspring_title = myfile2.readline() 
        offspring = myfile2.readline()
        character_history_title = myfile2.readline()
        character_history = myfile2.readline()
        myfile2.close()
        character_ac = int(character_ac)
        character_hp = int(character_hp)
        character_xp = int(character_xp)
        character_gold = int(character_gold)
        character_level = int(character_level)
        death_count = int(death_count)
        estate = int(estate)
        offspring = int(offspring)
        max_offspring = int(offspring)
        myfile = open("game_save.txt", "w")
        myfile.write("character_name = \n")
        myfile.write(str(character_name))           
        myfile.write("character_ac = \n")
        myfile.write(str(character_ac)+"\n")
        myfile.write("character_hp = \n")
        myfile.write(str(character_hp)+"\n")
        myfile.write("character_xp = \n")
        myfile.write(str(character_xp)+"\n")
        myfile.write("character_gold = \n")
        myfile.write(str(character_gold)+"\n")
        myfile.write("character_status = \n")
        myfile.write(str(" ")+"\n")
        myfile.write("character_level = \n")
        myfile.write(str(character_level)+"\n")
        myfile.write("death_count = \n")
        myfile.write(str(death_count)+"\n")
        myfile.write("estate = \n")
        myfile.write(str(estate)+"\n")
        myfile.write("offspring = \n")
        myfile.write(str(offspring)+"\n")
        myfile.write("character_history = \n")
        myfile.write(str(character_history))
        myfile.close()


### Function to create a new game ###
def new_save():
        myfile = open("game_save.txt", "w")
        myfile.write("character_name = \n")
        myfile.write(str("Player"+ "\n"))           
        myfile.write("character_ac = \n")
        myfile.write(str("0")+"\n")
        myfile.write("character_hp = \n")
        myfile.write(str("10")+"\n")
        myfile.write("character_xp = \n")
        myfile.write(str("0")+"\n")
        myfile.write("character_gold = \n")
        myfile.write(str("0")+"\n")
        myfile.write("character_status = \n")
        myfile.write(str(" ")+"\n")
        myfile.write("character_level = \n")
        myfile.write(str("0")+"\n")
        myfile.write("death_count = \n")
        myfile.write(str("0")+"\n")
        myfile.write("estate = \n")
        myfile.write(str("0")+"\n")
        myfile.write("offspring = \n")
        myfile.write(str("0")+"\n")
        myfile.write("character_history = \n")
        myfile.write(str(" "))
        myfile.close()

### Function to save the game ###
def game_save():
        myfile = open("game_save.txt", "w")
        myfile.write("character_name = \n")
        myfile.write(str(character_name))           
        myfile.write("character_ac = \n")
        myfile.write(str(character_ac)+"\n")
        myfile.write("character_hp = \n")
        myfile.write(str(character_hp)+"\n")
        myfile.write("character_xp = \n")
        myfile.write(str(character_xp)+"\n")
        myfile.write("character_gold = \n")
        myfile.write(str(character_gold)+"\n")
        myfile.write("character_status = \n")
        myfile.write(str(" ")+"\n")
        myfile.write("character_level = \n")
        myfile.write(str(character_level)+"\n")
        myfile.write("death_count = \n")
        myfile.write(str(death_count)+"\n")
        myfile.write("estate = \n")
        myfile.write(str(estate)+"\n")
        myfile.write("offspring = \n")
        myfile.write(str(offspring)+"\n")
        myfile.write("character_history = \n")
        myfile.write(str(character_history))
        myfile.close()

### Function to save a backup of the game ###
def game_backup():
        myfile = open("game_save2.txt", "w")
        myfile.write("character_name = \n")
        myfile.write(str(character_name))           
        myfile.write("character_ac = \n")
        myfile.write(str(character_ac)+"\n")
        myfile.write("character_hp = \n")
        myfile.write(str(character_hp)+"\n")
        myfile.write("character_xp = \n")
        myfile.write(str(character_xp)+"\n")
        myfile.write("character_gold = \n")
        myfile.write(str(character_gold)+"\n")
        myfile.write("character_status = \n")
        myfile.write(str(" ")+"\n")
        myfile.write("character_level = \n")
        myfile.write(str(character_level)+"\n")
        myfile.write("death_count = \n")
        myfile.write(str(death_count)+"\n")
        myfile.write("estate = \n")
        myfile.write(str(estate)+"\n")
        myfile.write("offspring = \n")
        myfile.write(str(offspring)+"\n")
        myfile.write("character_history = \n")
        myfile.write(str(character_history))
        myfile.close()

### Function to load the main game menu ###
def start_menu():
        x, y, xm, ym, xo, yo, yc, yo2, xm2, ym2 = startx+40, starty, -120, 0, 950, 20, 60, 100, 970, 480
        music1 = pygame.mixer.music.load('menu.mp3')
        music1
        pygame.mixer.music.play(-1)
        menu_option = True
        while menu_option:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit(); sys.exit()
            mscreen_width, mscreen_height  = 900, 520
            character_name = 'Player'
            character_ac, character_hp, character_xp, character_gold, character_level  = 0,10,0,0,0
            player_attack = character_level+character_ac
            character_status = 'Attack bonus: +' + str(player_attack)
            myfile2 = open("game_save.txt", "r")
            character_title = myfile2.readline()
            character_name = myfile2.readline()
            character_ac_title = myfile2.readline() 
            character_ac = myfile2.readline()
            character_hp_title = myfile2.readline() 
            character_hp = myfile2.readline()
            character_xp_title = myfile2.readline() 
            character_xp = myfile2.readline()
            character_gold_title = myfile2.readline() 
            character_gold = myfile2.readline()
            character_status_title = myfile2.readline() 
            character_status = myfile2.readline()
            character_level_title = myfile2.readline() 
            character_level = myfile2.readline()
            death_count_title = myfile2.readline() 
            death_count = myfile2.readline()
            estate_title = myfile2.readline() 
            estate = myfile2.readline()
            offspring_title = myfile2.readline() 
            offspring = myfile2.readline()
            character_history_title = myfile2.readline()
            character_history = myfile2.readline()
            myfile2.close()
            character_ac = int(character_ac)
            character_hp = int(character_hp)
            character_xp = int(character_xp)
            character_gold = int(character_gold)
            character_level = int(character_level)
            death_count = int(death_count)
            estate = int(estate)
            offspring = int(offspring)
            max_offspring = int(offspring)
            player_attack = character_level+character_ac
            character_status = 'Attack bonus: +' + str(player_attack)
            death_count = int(death_count)
            if character_level < -1:
                    title = str('Undead')
            if character_level == -1:
                    title = str('Crippled')
            if character_level == 0:
                    title = str('Peasant')
            if character_level == 1:
                    title = str('Guard')
            if character_level == 2:
                    title = str('Militia')
            if character_level == 3:
                    title = str('Mercenary')
            if character_level == 4:
                    title = str('Soldier')
            if character_level == 5:
                    title = str('Warrior')
            if character_level == 6:
                    title = str('Warrior Leader')
            if character_level == 7:
                    title = str('Royal Guard')
            if character_level == 8:
                    title = str('Royal Soldier')
            if character_level == 9:
                    title = str('Royal Commander')
            if character_level == 10:
                    title = str('General')
            if character_level == 11:
                    title = str('High Priest')
            if character_level == 12:
                    title = str('Demi-god')
            if character_level == 13:
                    title = str('Megarachne God')
            if character_level == 14:
                    title = str('Hound God')
            if character_level == 15:
                    title = str('Wolf God')
            if character_level == 16:
                    title = str('Serpent God')
            if character_level == 17:
                    title = str('Arthropleura God')
            if character_level > 17:
                    title = str('Minotaur God')
                    complete = "Minotaur God.............................................................................................Game Complete"
                    mtextCom = font.render(complete, 1, (text_colour))
                    win.blit(mtextCom, (150,150))
                    pygame.display.update()
                    #speak.Speak("Congratulations you have completed the game by reaching the Minotaur God level.")
            
            bg_menu_list = ['minoans10.jpg','minoans27.jpg','minoans12.jpg','minoans13.jpg','minoans14.jpg','minoans17.jpg','minoans18.jpg','minoans19.jpg']
            bg_menu_choice = random.choice(bg_menu_list)
            bg_menu = pygame.image.load('introscreen0.jpg')
            win_menu = pygame.display.set_mode((screen_width, screen_height))
            pygame.display.set_caption("Minoan RPG")
            win.blit(bg_menu, (0,0))
            mtext = font.render('Menu options', 1, (0,0,0))
            text = font.render('Game loaded', 1, (0,0,0))
            text2 = font.render('Name: ' + str(character_name), 1, (0,0,0))
            text3 = font.render('AC: ' + str(character_ac), 1, (0,0,0))
            text4 = font.render('HP: '+ str(character_hp), 1, (0,0,0))
            text5 = font.render('XP: '+ str(character_xp), 1, (0,0,0))
            text6 = font.render('Gold: '+ str(character_gold), 1, (0,0,0))
            text6a = font.render('Status: '+ str(character_status), 1, (0,0,0))
            text6b = font.render('Level: '+ str(character_level), 1, (0,0,0))
            text6c = font.render('Kills: '+ str(death_count), 1, (0,0,0))
            text6d = font.render('Progression: '+ str(title), 1, (0,0,0))
            text16 = font.render('-----------------+------------------', 1, (0,0,0))
            mtext0 = font.render('New game (Spacebar)', 1, (0,0,0))
            mtext1 = font.render('Load game (Right Arrow)', 1, (0,0,0))
            mtext2 = font.render('Start (Left Arrow)', 1, (0,0,0))
            mtext3 = font.render('Exit (Down Arrow)', 1, (0,0,0))
            mtext3a = font.render('Backup game (TAB Key)', 1, (0,0,0))
            mtext3b = font.render('Enter town (Up Arrow)', 1, (0,0,0))
            mtext16 = font.render('-----------------+------------------', 1, (0,0,0))
            mtext10 = font.render(document_id, 1, (text_colour))
            win.blit(text, (600,260))
            win.blit(text16, (600,280)) 
            win.blit(text2, (600,300))
            win.blit(text3, (600,320))
            win.blit(text4, (600,340))
            win.blit(text5, (600,360))
            win.blit(text6, (600,380))
            win.blit(text6a, (600,400))
            win.blit(text6b, (600,420))
            win.blit(text6c, (600,440))
            win.blit(text6d, (600,460))
            win.blit(mtext0, (100,320))
            win.blit(mtext1, (100,340))  
            win.blit(mtext2, (100,300))
            win.blit(mtext3, (100,360))
            win.blit(mtext3a, (100,380))
            win.blit(mtext3b, (100,400))
            win.blit(mtext10, (600,500))
            win.blit(mtext, (100,260))
            win.blit(mtext16, (100,280))

            ### Displays the scrolling walls in the main menu ###
            if xm <= 2100:    
                    xm, ym = xm + 1, ym + 0
            else:
                    xm = 0
            win.blit(chartile5, (xm,ym))
            win.blit(chartile5, (xm-40,ym))
            win.blit(chartile5, (xm-80,ym))
            win.blit(chartile5, (xm-120,ym))
            win.blit(chartile5, (xm-160,ym))
            win.blit(chartile5, (xm-200,ym))
            win.blit(chartile5, (xm-240,ym))
            win.blit(chartile5, (xm-280,ym))
            win.blit(chartile5, (xm-320,ym))
            win.blit(chartile5, (xm-360,ym))
            win.blit(chartile5, (xm-400,ym))
            win.blit(chartile5, (xm-440,ym))
            win.blit(chartile5, (xm-480,ym))
            win.blit(chartile5, (xm-520,ym))
            win.blit(chartile5, (xm-560,ym))
            win.blit(chartile5, (xm-600,ym))
            win.blit(chartile5, (xm-640,ym))
            win.blit(chartile5, (xm-680,ym))
            win.blit(chartile5, (xm-720,ym))
            win.blit(chartile5, (xm-760,ym))
            win.blit(chartile5, (xm-800,ym))
            win.blit(chartile5, (xm-840,ym))
            win.blit(chartile5, (xm-880,ym))
            win.blit(chartile5, (xm-920,ym))
            win.blit(chartile5, (xm-960,ym))
            win.blit(chartile5, (xm-1000,ym))
            win.blit(chartile5, (xm-1040,ym))
            win.blit(chartile5, (xm-1080,ym))
            win.blit(chartile5, (xm-1120,ym))
            win.blit(chartile5, (xm-1160,ym))
            win.blit(chartile5, (xm-1200,ym))
            win.blit(chartile5, (xm-1240,ym))
            if xm2 >= -1200:    
                    xm2, ym2 = xm2 - 1, ym2 + 0
            else:
                    xm2 = 990
            win.blit(chartile5, (xm2,ym2))
            win.blit(chartile5, (xm2+40,ym2))
            win.blit(chartile5, (xm2+80,ym2))
            win.blit(chartile5, (xm2+120,ym2))
            win.blit(chartile5, (xm2+160,ym2))
            win.blit(chartile5, (xm2+200,ym2))
            win.blit(chartile5, (xm2+240,ym2))
            win.blit(chartile5, (xm2+280,ym2))
            win.blit(chartile5, (xm2+320,ym2))
            win.blit(chartile5, (xm2+360,ym2))
            win.blit(chartile5, (xm2+400,ym2))
            win.blit(chartile5, (xm2+440,ym2))
            win.blit(chartile5, (xm2+480,ym2))
            win.blit(chartile5, (xm2+520,ym2))
            win.blit(chartile5, (xm2+560,ym2))
            win.blit(chartile5, (xm2+600,ym2))
            win.blit(chartile5, (xm2+640,ym2))
            win.blit(chartile5, (xm2+680,ym2))
            win.blit(chartile5, (xm2+720,ym2))
            win.blit(chartile5, (xm2+760,ym2))
            win.blit(chartile5, (xm2+800,ym2))
            win.blit(chartile5, (xm2+840,ym2))
            win.blit(chartile5, (xm2+880,ym2))
            win.blit(chartile5, (xm2+920,ym2))
            win.blit(chartile5, (xm2+960,ym2))
            win.blit(chartile5, (xm2+1000,ym2))
            win.blit(chartile5, (xm2+1040,ym2))
            win.blit(chartile5, (xm2+1080,ym2))
            win.blit(chartile5, (xm2+1120,ym2))
            win.blit(chartile5, (xm2+1160,ym2))
            win.blit(chartile5, (xm2+1200,ym2))
            win.blit(chartile5, (xm2+1240,ym2))
            pygame.display.update()

            ### Key intput settings in the main menu ###
            keys = pygame.key.get_pressed()
            if keys[pygame.K_SPACE]:
                        soundmenu.play()
                        mtext0 = font.render('New game (Spacebar)', 1, (50,110,10))
                        win.blit(mtext0, (100,320))
                        pygame.display.update() 
                        speak.Speak('You have created a new game in the savegame text file')
                        new_save()
            if keys[pygame.K_RIGHT]:
                        soundmenu.play()
                        load_save()
                        character_name = 'Player'
                        character_ac, character_hp, character_xp, character_gold, character_level  = 1,10,0,0,0         
                        myfile2 = open("game_save2.txt", "r")
                        character_title = myfile2.readline()
                        character_name = myfile2.readline()
                        character_ac_title = myfile2.readline() 
                        character_ac = myfile2.readline()
                        character_hp_title = myfile2.readline() 
                        character_hp = myfile2.readline()
                        character_xp_title = myfile2.readline() 
                        character_xp = myfile2.readline()
                        character_gold_title = myfile2.readline() 
                        character_gold = myfile2.readline()
                        character_status_title = myfile2.readline() 
                        character_status = myfile2.readline()
                        character_level_title = myfile2.readline() 
                        character_level = myfile2.readline()
                        death_count_title = myfile2.readline() 
                        death_count = myfile2.readline()
                        estate_title = myfile2.readline() 
                        estate = myfile2.readline()
                        offspring_title = myfile2.readline() 
                        offspring = myfile2.readline()
                        character_history_title = myfile2.readline()
                        character_history = myfile2.readline()
                        myfile2.close()
                        character_ac = int(character_ac)
                        character_hp = int(character_hp)
                        character_xp = int(character_xp)
                        character_gold = int(character_gold)
                        character_level = int(character_level)
                        death_count = int(death_count)
                        estate = int(estate)
                        offspring = int(offspring)
                        max_offspring = int(offspring)
                        player_attack = character_level+character_ac
                        character_status = 'Attack bonus: +' + str(player_attack)
                        death_count = int(death_count)
                        text = font.render('Game loaded', 1, (0,0,0))
                        text2 = font.render('Name: ' + str(character_name), 1, (0,0,0))
                        text3 = font.render('AC: ' + str(character_ac), 1, (0,0,0))
                        text4 = font.render('HP: '+ str(character_hp), 1, (0,0,0))
                        text5 = font.render('XP: '+ str(character_xp), 1, (0,0,0))
                        text6 = font.render('Gold: '+ str(character_gold), 1, (0,0,0))
                        text6a = font.render('Status: '+ str(character_status), 1, (0,0,0))
                        text16 = font.render('-----------------+------------------', 1, (0,0,0))
                        win.blit(text, (600,260))
                        win.blit(text16, (600,280)) 
                        win.blit(text2, (600,300))
                        win.blit(text3, (600,320))
                        win.blit(text4, (600,340))
                        win.blit(text5, (600,360))
                        win.blit(text6, (600,380))
                        win.blit(text6a, (600, 400))
                        mtext1 = font.render('Load game (Right Arrow)', 1, (50,110,10))
                        win.blit(mtext1, (100,340))
                        pygame.display.update()
                        speak.Speak('You have loaded your backed up save game')           
            if keys[pygame.K_LEFT] and y > 10:
                        soundmenu.play()
                        mtext2 = font.render('Start (Left Arrow)', 1, (50,110,10))
                        win.blit(mtext2, (100,300))
                        pygame.display.update()
                        soundstart.play()
                        speak.Speak('You have entered a new area')
                        menu_choice = 1
                        break
            if keys[pygame.K_DOWN] and y < (screen_height -50):
                        soundmenu.play()
                        mtext3 = font.render('Exit (Down Arrow)', 1, (50,110,10))
                        win.blit(mtext3, (100,360))
                        pygame.display.update()
                        speak.Speak('You have exited the game')
                        pygame.quit()
            if keys[pygame.K_ESCAPE]:
                        soundmenu.play()
                        speak.Speak('You have exited the game')
                        pygame.quit()
            if keys[pygame.K_UP]:
                        soundmenu.play()
                        mtext3b = font.render('Enter town (Up Arrow)', 1, (50,110,10))
                        win.blit(mtext3b, (100,400))
                        pygame.display.update()
                        soundstart.play()
                        speak.Speak('You have entered the town')
                        town_menu()
                        break
            if keys[pygame.K_TAB]:
                        soundmenu.play()
                        mtext3a = font.render('Backup game (TAB Key)', 1, (50,110,10))
                        win.blit(mtext3a, (100,380))
                        pygame.display.update()
                        speak.Speak('You have backed up your game to the savegame2 text file')
                        game_backup()
            #if keys[pygame.K_1]:
                        #soundmenu.play()
                        #mtext3b = font.render('Enter town (Up Arrow)', 1, (50,110,10))
                        #win.blit(mtext3b, (100,400))
                        #pygame.display.update()
                        #soundstart.play()
                        #speak.Speak('You have entered the world map')
                        #worldmap_menu()
                        #break
            #if keys[pygame.K_2]:
                        #soundmenu.play()
                        #mtext3b = font.render('Enter town (Up Arrow)', 1, (50,110,10))
                        #win.blit(mtext3b, (100,400))
                        #pygame.display.update()
                        #soundstart.play()
                        #speak.Speak('You have entered the town map')
                        #townmap_menu()
                        #break

                    
### Function to load the town menu ###
def town_menu():
        x, y, xm, ym, xo, yo, yc, yo2, xm2, ym2 = startx+40, starty, -120, 0, 950, 20, 60, 100, 970, 480
        music3 = pygame.mixer.music.load('menu.mp3')
        music3
        pygame.mixer.music.play(-1)
        town_menu_option = True
        while town_menu_option:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit(); sys.exit()
            mscreen_width, mscreen_height  = 900, 520
            character_name = 'Player'
            title = ''
            character_ac, character_hp, character_xp, character_gold, character_level  = 0,10,0,0,0
            player_attack = character_level+character_ac
            character_status = 'Attack bonus: +' + str(player_attack)
            myfile2 = open("game_save.txt", "r")
            character_title = myfile2.readline()
            character_name = myfile2.readline()
            character_ac_title = myfile2.readline() 
            character_ac = myfile2.readline()
            character_hp_title = myfile2.readline() 
            character_hp = myfile2.readline()
            character_xp_title = myfile2.readline() 
            character_xp = myfile2.readline()
            character_gold_title = myfile2.readline() 
            character_gold = myfile2.readline()
            character_status_title = myfile2.readline() 
            character_status = myfile2.readline()
            character_level_title = myfile2.readline() 
            character_level = myfile2.readline()
            death_count_title = myfile2.readline() 
            death_count = myfile2.readline()
            estate_title = myfile2.readline() 
            estate = myfile2.readline()
            offspring_title = myfile2.readline() 
            offspring = myfile2.readline()
            character_history_title = myfile2.readline()
            character_history = myfile2.readline()
            myfile2.close()
            character_ac = int(character_ac)
            character_hp = int(character_hp)
            character_xp = int(character_xp)
            character_gold = int(character_gold)
            character_level = int(character_level)
            death_count = int(death_count)
            estate = int(estate)
            offspring = int(offspring)
            character_status = 'Attack bonus: +' + str(player_attack)
            death_count = int(death_count)
            bg_menu_list = ['minoans10.jpg','minoans27.jpg','minoans12.jpg','minoans13.jpg','minoans14.jpg','minoans15.jpg','minoans16.jpg','minoans17.jpg','minoans18.jpg','minoans19.jpg']
            bg_menu_choice = random.choice(bg_menu_list)
            bg_menu = pygame.image.load('town2.jpg')
            win_menu = pygame.display.set_mode((screen_width, screen_height))
            pygame.display.set_caption("Minoan Town")
            win.blit(bg_menu, (0,0))
            mtext = font.render('Upgrade options:', 1, (0,0,0))
            text = font.render('Player status:', 1, (0,0,0))
            text2 = font.render('Name: ' + str(character_name), 1, (0,0,0))
            text3 = font.render('AC: ' + str(character_ac), 1, (0,0,0))
            text4 = font.render('HP: '+ str(character_hp), 1, (0,0,0))
            text5 = font.render('XP: '+ str(character_xp), 1, (0,0,0))
            text6 = font.render('Gold: '+ str(character_gold), 1, (0,0,0))
            text6a = font.render('Status: '+ str(character_status), 1, (0,0,0))
            text6b = font.render('Level: '+ str(character_level), 1, (0,0,0))
            text6c = font.render('Kills: '+ str(death_count), 1, (0,0,0))
            text16 = font.render('-----------------+------------------', 1, (0,0,0))
            mtext0 = font.render(('Health ') + str((character_hp*character_hp*10+100)) +str( 'GP (Left Arrow)'), 1, (0,0,0))
            mtext1 = font.render(('Armor ') + str((character_ac*character_ac*1000+1000)) +str( 'GP (Right Arrow)'), 1, (0,0,0))
            mtext2 = font.render('Enter estate (Up Arrow)', 1, (0,0,0))
            mtext3 = font.render('Leave town (Down Arrow)', 1, (0,0,0))
            mtext3a = font.render('Backup game (TAB Key)', 1, (0,0,0))
            mtext16 = font.render('-----------------+------------------', 1, (0,0,0))
            win.blit(text, (720,260))
            win.blit(text16, (720,280)) 
            win.blit(text2, (720,300))
            win.blit(text3, (720,320))
            win.blit(text4, (720,340))
            win.blit(text5, (720,360))
            win.blit(text6, (720,380))
            win.blit(text6a, (720,400))
            win.blit(text6b, (720,420))
            win.blit(text6c, (720,440))
            win.blit(mtext0, (10,320))
            win.blit(mtext1, (10,340))  
            win.blit(mtext2, (10,300))
            win.blit(mtext3, (10,360))
            win.blit(mtext3a, (10,380))
            win.blit(mtext, (10,260))
            win.blit(mtext16, (10,280))
            death_count = int(death_count)
            if xm2 >= -12000:    
                    xm2, ym2 = xm2 - 1, ym2 + 0
            else:
                    xm2 = 990

            mtext11 = font.render(instructions, 1, (text_colour))
            win.blit(mtext11, (xm2+80,ym2))
            pygame.display.update()

            
            keys = pygame.key.get_pressed()
            if keys[pygame.K_LEFT]:
                        if character_gold < (character_hp*character_hp*10+100):
                            speak.Speak('You do not have enough gold')
                        else:
                            soundmenu.play()
                            character_gold = character_gold - (character_hp*character_hp*10+100)
                            character_hp = character_hp + 1
                            mtext0 = font.render(('Health ')  + str((character_hp*character_hp*10+100)) +str( 'GP (Left Arrow)'), 1, (50,110,10))
                            win.blit(mtext0, (10,320))
                            pygame.display.update()
                            speak.Speak('You have increased your hit points')
            if keys[pygame.K_RIGHT]:
                        if character_gold < (character_ac*character_ac*1000+1000):
                            speak.Speak('You do not have enough gold')
                        else:
                            soundmenu.play()
                            character_gold = character_gold - (character_ac*character_ac*1000+1000)
                            character_ac = character_ac + 1
                            mtext1 = font.render(('Armor ') + str((character_ac*character_ac*1000+1000)) +str( 'GP (Right Arrow)'), 1, (50,110,10))
                            win.blit(mtext1, (10,340))
                            pygame.display.update()
                            speak.Speak('You have increased your armour')
            if keys[pygame.K_UP]:
                        if character_gold < 10000:
                            speak.Speak('You do not hold enough gold to use your estate')
                        else:
                            soundmenu.play()
                            mtext2 = font.render('Enter estate (Up Arrow)', 1, (50,110,10))
                            win.blit(mtext2, (10,300))
                            pygame.display.update()
                            speak.Speak('You have entered your estate')
                            estate_menu()
            if keys[pygame.K_DOWN] and y < (screen_height -50):
                        soundmenu.play()
                        mtext3 = font.render('Leave town (Down Arrow)', 1, (50,110,10))
                        win.blit(mtext3, (10,360))
                        pygame.display.update()
                        speak.Speak('You have exited the town')
                        start_menu()
                        break
            if keys[pygame.K_ESCAPE]:
                        soundmenu.play()
                        speak.Speak('You have exited the game')
                        pygame.quit()
            if keys[pygame.K_SPACE]:
                        soundmenu.play()
                        mtext2 = font.render('Start (Up Arrow)', 1, (50,110,10))
                        win.blit(mtext2, (10,300))
                        pygame.display.update()
                        soundstart.play()
                        speak.Speak('You have entered a new area')
                        break
            if keys[pygame.K_TAB]:
                        soundmenu.play()
                        mtext3a = font.render('Backup game (TAB Key)', 1, (50,110,10))
                        win.blit(mtext3a, (10,380))
                        pygame.display.update()
                        speak.Speak('You have backed up your game to the savegame2 text file')
            myfile = open("game_save.txt", "w")
            myfile.write("character_name = \n")
            myfile.write(str(character_name))           
            myfile.write("character_ac = \n")
            myfile.write(str(character_ac)+"\n")
            myfile.write("character_hp = \n")
            myfile.write(str(character_hp)+"\n")
            myfile.write("character_xp = \n")
            myfile.write(str(character_xp)+"\n")
            myfile.write("character_gold = \n")
            myfile.write(str(character_gold)+"\n")
            myfile.write("character_status = \n")
            myfile.write(str(" ")+"\n")
            myfile.write("character_level = \n")
            myfile.write(str(character_level)+"\n")
            myfile.write("death_count = \n")
            myfile.write(str(death_count)+"\n")
            myfile.write("estate = \n")
            myfile.write(str(estate)+"\n")
            myfile.write("offspring = \n")
            myfile.write(str(offspring)+"\n")
            myfile.write("character_history = \n")
            myfile.write(str(character_history))
            myfile.close()
            
                 
### Function to load the world menu ###         
def worldmap_menu():
        history_list_num = 0
        new_line = 0
        new_word = " "
        x, y, xm, ym, xo, yo, yc, yo2, xm2, ym2 = startx+40, starty, -120, 0, 950, 20, 60, 100, 970, 480
        music3 = pygame.mixer.music.load('menu.mp3')
        music3
        pygame.mixer.music.play(-1)
        town_menu_option = True
        history_list = False 
        while town_menu_option:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit(); sys.exit()
            mscreen_width, mscreen_height  = 900, 520
            character_name = 'Player'
            title = ''
            character_ac, character_hp, character_xp, character_gold, character_level  = 0,10,0,0,0
            player_attack = character_level+character_ac
            character_status = 'Attack bonus: +' + str(player_attack)
            myfile2 = open("game_save.txt", "r")
            character_title = myfile2.readline()
            character_name = myfile2.readline()
            character_ac_title = myfile2.readline() 
            character_ac = myfile2.readline()
            character_hp_title = myfile2.readline() 
            character_hp = myfile2.readline()
            character_xp_title = myfile2.readline() 
            character_xp = myfile2.readline()
            character_gold_title = myfile2.readline() 
            character_gold = myfile2.readline()
            character_status_title = myfile2.readline() 
            character_status = myfile2.readline()
            character_level_title = myfile2.readline() 
            character_level = myfile2.readline()
            death_count_title = myfile2.readline() 
            death_count = myfile2.readline()
            estate_title = myfile2.readline() 
            estate = myfile2.readline()
            offspring_title = myfile2.readline() 
            offspring = myfile2.readline()
            character_history_title = myfile2.readline()
            character_history = myfile2.readline()
            myfile2.close()
            character_ac = int(character_ac)
            character_hp = int(character_hp)
            character_xp = int(character_xp)
            character_gold = int(character_gold)
            character_level = int(character_level)
            death_count = int(death_count)
            estate = int(estate)
            offspring = int(offspring)
            player_attack = character_level+character_ac
            character_status = 'Attack bonus: +' + str(player_attack)
            death_count = int(death_count)
            bg_menu_list = ['minoans10.jpg','minoans27.jpg','minoans12.jpg','minoans13.jpg','minoans14.jpg','minoans15.jpg','minoans16.jpg','minoans17.jpg','minoans18.jpg','minoans19.jpg']
            bg_menu_choice = random.choice(bg_menu_list)
            bg_menu = pygame.image.load('backgroundworld1.jpg')
            win_menu = pygame.display.set_mode((screen_width, screen_height))
            pygame.display.set_caption("World Map")
            win.blit(bg_menu, (0,0))
            mtext = font.render('Upgrade options:', 1, (0,0,0))
            text = font.render('Player status:', 1, (0,0,0))
            text2 = font.render('Name: ' + str(character_name), 1, (0,0,0))
            text3a = font.render('Dungeon completed: ' + str(new_word), 1, (0,0,0))
            text4 = font.render('HP: '+ str(character_hp), 1, (0,0,0))
            text5 = font.render('XP: '+ str(character_xp), 1, (0,0,0))
            text6 = font.render('Gold: '+ str(character_gold), 1, (0,0,0))
            text6a = font.render('Status: '+ str(character_status), 1, (0,0,0))
            text6b = font.render('Level: '+ str(character_level), 1, (0,0,0))
            text6c = font.render('Kills: '+ str(death_count), 1, (0,0,0))
            text16 = font.render('-----------------+------------------', 1, (0,0,0))
            mtext0 = font.render('Health 100 GP (Left Arrow)', 1, (0,0,0))
            mtext1 = font.render('Armor 1,000 GP (Right Arrow)', 1, (0,0,0))
            mtext2 = font.render('Estate 10,000 (Up Arrow)', 1, (0,0,0))
            mtext3 = font.render('Leave town (Down Arrow)', 1, (0,0,0))
            mtext3a = font.render('Backup game (TAB Key)', 1, (0,0,0))
            mtext16 = font.render('-----------------+------------------', 1, (0,0,0))
            win.blit(text, (720,260))
            win.blit(text16, (720,280)) 
            win.blit(text2, (720,300))
            win.blit(text3a, (10,420))
            win.blit(text4, (720,340))
            win.blit(text5, (720,360))
            win.blit(text6, (720,380))
            win.blit(text6a, (720,400))
            win.blit(text6b, (720,420))
            win.blit(text6c, (720,440))
            win.blit(mtext0, (10,320))
            win.blit(mtext1, (10,340))  
            win.blit(mtext2, (10,300))
            win.blit(mtext3, (10,360))
            win.blit(mtext3a, (10,380))
            win.blit(mtext, (10,260))
            win.blit(mtext16, (10,280))
            death_count = int(death_count)
            pygame.display.update()
            keys = pygame.key.get_pressed()
            if keys[pygame.K_LEFT]:
                        if character_gold < 100:
                            speak.Speak('You do not have enough gold')
                        else:
                            soundmenu.play()
                            character_gold = character_gold -100
                            character_hp = character_hp + 2
                            mtext0 = font.render('Health 100 GP (Left Arrow)', 1, (50,110,10))
                            win.blit(mtext0, (10,320))
                            pygame.display.update()
                            speak.Speak('You have increased your hit points')
            if keys[pygame.K_RIGHT]:
                        if character_gold < 1000:
                            speak.Speak('You do not have enough gold')
                        else:
                            soundmenu.play()
                            character_gold = character_gold -1000
                            character_ac = character_ac + 1
                            mtext1 = font.render('Armor 1,000 GP (Right Arrow)', 1, (50,110,10))
                            win.blit(mtext1, (10,340))
                            pygame.display.update()
                            speak.Speak('You have increased your armour')
            if keys[pygame.K_UP]:
                            history_list_num = history_list_num + 1
                            history_list = True
                            character_historyL = character_history
                            new_word0 = character_history
                            while history_list == True:
                                    for num in (character_historyL):
                                        temp_list = num
                                        history1_index = temp_list[0]
                                        if history1_index == "[":
                                            new_word = " "
                                        if history1_index == "]":
                                            new_line = new_line + 1
                                            speak.Speak(str(new_word))
                                            if new_line == history_list_num:
                                                history_list = False
                                                new_line = 0
                                                break
                                            print(new_line)
                                            print(history_list_num)
                                            print(new_word)
                                        else:
                                            new_word = new_word+history1_index     
                                    
                                
                                
                            soundmenu.play()
                            mtext2 = font.render('Estate 10,000 (Up Arrow)', 1, (50,110,10))
                            win.blit(mtext2, (10,300))
                            text3a = font.render('Dungeon completed: ' + str(new_word0), 1, (0,0,0))
                            win.blit(text3a, (10,420))
                            pygame.display.update()
                            speak.Speak('You recall an earlier dungeon adventure')
            if keys[pygame.K_DOWN] and y < (screen_height -50):
                        soundmenu.play()
                        mtext3 = font.render('Leave town (Down Arrow)', 1, (50,110,10))
                        win.blit(mtext3, (10,360))
                        pygame.display.update()
                        speak.Speak('You have exited the town')
                        start_menu()
                        break
            if keys[pygame.K_ESCAPE]:
                        soundmenu.play()
                        speak.Speak('You have exited the game')
                        pygame.quit()
            if keys[pygame.K_SPACE]:
                        soundmenu.play()
                        mtext2 = font.render('Start (Up Arrow)', 1, (50,110,10))
                        win.blit(mtext2, (10,300))
                        pygame.display.update()
                        soundstart.play()
                        speak.Speak('You have entered a new area')
                        break
            if keys[pygame.K_TAB]:
                        soundmenu.play()
                        mtext3a = font.render('Backup game (TAB Key)', 1, (50,110,10))
                        win.blit(mtext3a, (10,380))
                        pygame.display.update()
                        speak.Speak('You have backed up your game to the savegame2 text file')
            myfile = open("game_save.txt", "w")
            myfile.write("character_name = \n")
            myfile.write(str(character_name))           
            myfile.write("character_ac = \n")
            myfile.write(str(character_ac)+"\n")
            myfile.write("character_hp = \n")
            myfile.write(str(character_hp)+"\n")
            myfile.write("character_xp = \n")
            myfile.write(str(character_xp)+"\n")
            myfile.write("character_gold = \n")
            myfile.write(str(character_gold)+"\n")
            myfile.write("character_status = \n")
            myfile.write(str(" ")+"\n")
            myfile.write("character_level = \n")
            myfile.write(str(character_level)+"\n")
            myfile.write("death_count = \n")
            myfile.write(str(death_count)+"\n")
            myfile.write("estate = \n")
            myfile.write(str(estate)+"\n")
            myfile.write("offspring = \n")
            myfile.write(str(offspring)+"\n")
            myfile.write("character_history = \n")
            myfile.write(str(character_history))
            myfile.close()
            
### Function to load the town map menu ###           
def townmap_menu():
        x, y, xm, ym, xo, yo, yc, yo2, xm2, ym2 = startx+40, starty, -120, 0, 950, 20, 60, 100, 970, 480
        music3 = pygame.mixer.music.load('menu.mp3')
        music3
        pygame.mixer.music.play(-1)
        town_menu_option = True
        while town_menu_option:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit(); sys.exit()
            mscreen_width, mscreen_height  = 900, 520
            character_name = 'Player'
            title = ''
            character_ac, character_hp, character_xp, character_gold, character_level  = 0,10,0,0,0
            player_attack = character_level+character_ac
            character_status = 'Attack bonus: +' + str(player_attack)
            myfile2 = open("game_save.txt", "r")
            character_title = myfile2.readline()
            character_name = myfile2.readline()
            character_ac_title = myfile2.readline() 
            character_ac = myfile2.readline()
            character_hp_title = myfile2.readline() 
            character_hp = myfile2.readline()
            character_xp_title = myfile2.readline() 
            character_xp = myfile2.readline()
            character_gold_title = myfile2.readline() 
            character_gold = myfile2.readline()
            character_status_title = myfile2.readline() 
            character_status = myfile2.readline()
            character_level_title = myfile2.readline() 
            character_level = myfile2.readline()
            death_count_title = myfile2.readline() 
            death_count = myfile2.readline()
            estate_title = myfile2.readline() 
            estate = myfile2.readline()
            offspring_title = myfile2.readline() 
            offspring = myfile2.readline()
            character_history_title = myfile2.readline()
            character_history = myfile2.readline()
            myfile2.close()
            character_ac = int(character_ac)
            character_hp = int(character_hp)
            character_xp = int(character_xp)
            character_gold = int(character_gold)
            character_level = int(character_level)
            death_count = int(death_count)
            estate = int(estate)
            offspring = int(offspring)
            player_attack = character_level+character_ac
            character_status = 'Attack bonus: +' + str(player_attack)
            death_count = int(death_count)
            bg_menu_list = ['minoans10.jpg','minoans27.jpg','minoans12.jpg','minoans13.jpg','minoans14.jpg','minoans15.jpg','minoans16.jpg','minoans17.jpg','minoans18.jpg','minoans19.jpg']
            bg_menu_choice = random.choice(bg_menu_list)
            bg_menu = pygame.image.load('backgroundtown1.jpg')
            win_menu = pygame.display.set_mode((screen_width, screen_height))
            pygame.display.set_caption("Town Map")
            win.blit(bg_menu, (0,0))
            mtext = font.render('Upgrade options:', 1, (0,0,0))
            text = font.render('Player status:', 1, (0,0,0))
            text2 = font.render('Name: ' + str(character_name), 1, (0,0,0))
            text3 = font.render('AC: ' + str(character_ac), 1, (0,0,0))
            text4 = font.render('HP: '+ str(character_hp), 1, (0,0,0))
            text5 = font.render('XP: '+ str(character_xp), 1, (0,0,0))
            text6 = font.render('Gold: '+ str(character_gold), 1, (0,0,0))
            text6a = font.render('Status: '+ str(character_status), 1, (0,0,0))
            text6b = font.render('Level: '+ str(character_level), 1, (0,0,0))
            text6c = font.render('Kills: '+ str(death_count), 1, (0,0,0))
            text16 = font.render('-----------------+------------------', 1, (0,0,0))
            mtext0 = font.render(('Health ') + str((character_hp*character_hp*10+100)) +str( 'GP (Left Arrow)'), 1, (0,0,0))
            mtext1 = font.render(('Armor ') + str((character_ac*character_ac*1000+1000)) +str( 'GP (Right Arrow)'), 1, (0,0,0))
            mtext2 = font.render('Enter estate (Up Arrow)', 1, (0,0,0))
            mtext3 = font.render('Leave town (Down Arrow)', 1, (0,0,0))
            mtext3a = font.render('Backup game (TAB Key)', 1, (0,0,0))
            mtext16 = font.render('-----------------+------------------', 1, (0,0,0))
            win.blit(text, (720,260))
            win.blit(text16, (720,280)) 
            win.blit(text2, (720,300))
            win.blit(text3, (720,320))
            win.blit(text4, (720,340))
            win.blit(text5, (720,360))
            win.blit(text6, (720,380))
            win.blit(text6a, (720,400))
            win.blit(text6b, (720,420))
            win.blit(text6c, (720,440))
            win.blit(mtext0, (10,320))
            win.blit(mtext1, (10,340))  
            win.blit(mtext2, (10,300))
            win.blit(mtext3, (10,360))
            win.blit(mtext3a, (10,380))
            win.blit(mtext, (10,260))
            win.blit(mtext16, (10,280))
            death_count = int(death_count)
            pygame.display.update()
            keys = pygame.key.get_pressed()
            if keys[pygame.K_LEFT]:
                        if character_gold < (character_hp*character_hp*10+100):
                            speak.Speak('You do not have enough gold')
                        else:
                            soundmenu.play()
                            character_gold = character_gold - (character_hp*character_hp*10+100)
                            character_hp = character_hp + 1
                            mtext0 = font.render(('Health ')  + str((character_hp*character_hp*10+100)) +str( 'GP (Left Arrow)'), 1, (50,110,10))
                            win.blit(mtext0, (10,320))
                            pygame.display.update()
                            speak.Speak('You have increased your hit points')
            if keys[pygame.K_RIGHT]:
                        if character_gold < (character_ac*character_ac*1000+1000):
                            speak.Speak('You do not have enough gold')
                        else:
                            soundmenu.play()
                            character_gold = character_gold - (character_ac*character_ac*1000+1000)
                            character_ac = character_ac + 1
                            mtext1 = font.render(('Armor ') + str((character_ac*character_ac*1000+1000)) +str( 'GP (Right Arrow)'), 1, (50,110,10))
                            win.blit(mtext1, (10,340))
                            pygame.display.update()
                            speak.Speak('You have increased your armour')
            if keys[pygame.K_UP]:
                        if character_gold < 10000:
                            speak.Speak('You do not hold enough gold to use your estate')
                        else:
                            soundmenu.play()
                            mtext2 = font.render('Enter estate (Up Arrow)', 1, (50,110,10))
                            win.blit(mtext2, (10,300))
                            pygame.display.update()
                            speak.Speak('You have entered your estate')
                            estate_menu()
            if keys[pygame.K_DOWN] and y < (screen_height -50):
                        soundmenu.play()
                        mtext3 = font.render('Leave town (Down Arrow)', 1, (50,110,10))
                        win.blit(mtext3, (10,360))
                        pygame.display.update()
                        speak.Speak('You have exited the town')
                        start_menu()
                        break
            if keys[pygame.K_ESCAPE]:
                        soundmenu.play()
                        speak.Speak('You have exited the game')
                        pygame.quit()
            if keys[pygame.K_SPACE]:
                        soundmenu.play()
                        mtext2 = font.render('Start (Up Arrow)', 1, (50,110,10))
                        win.blit(mtext2, (10,300))
                        pygame.display.update()
                        soundstart.play()
                        speak.Speak('You have entered a new area')
                        break
            if keys[pygame.K_TAB]:
                        soundmenu.play()
                        mtext3a = font.render('Backup game (TAB Key)', 1, (50,110,10))
                        win.blit(mtext3a, (10,380))
                        pygame.display.update()
                        speak.Speak('You have backed up your game to the savegame2 text file')
            myfile = open("game_save.txt", "w")
            myfile.write("character_name = \n")
            myfile.write(str(character_name))           
            myfile.write("character_ac = \n")
            myfile.write(str(character_ac)+"\n")
            myfile.write("character_hp = \n")
            myfile.write(str(character_hp)+"\n")
            myfile.write("character_xp = \n")
            myfile.write(str(character_xp)+"\n")
            myfile.write("character_gold = \n")
            myfile.write(str(character_gold)+"\n")
            myfile.write("character_status = \n")
            myfile.write(str(" ")+"\n")
            myfile.write("character_level = \n")
            myfile.write(str(character_level)+"\n")
            myfile.write("death_count = \n")
            myfile.write(str(death_count)+"\n")
            myfile.write("estate = \n")
            myfile.write(str(estate)+"\n")
            myfile.write("offspring = \n")
            myfile.write(str(offspring)+"\n")
            myfile.write("character_history = \n")
            myfile.write(str(character_history))
            myfile.close()


### Function to load the estate menu ###
def estate_menu():
        x, y, xm, ym, xo, yo, yc, yo2, xm2, ym2 = startx+40, starty, -120, 0, 950, 20, 60, 100, 970, 480
        music1 = pygame.mixer.music.load('menu.mp3')
        music1
        pygame.mixer.music.play(-1)
        town_menu_option = True
        while town_menu_option:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit(); sys.exit()
            mscreen_width, mscreen_height  = 900, 520
            character_name = 'Player'
            title = ''
            character_ac, character_hp, character_xp, character_gold, character_level  = 0,10,0,0,0
            player_attack = character_level+character_ac
            character_status = 'Attack bonus: +' + str(player_attack)
            myfile2 = open("game_save.txt", "r")
            character_title = myfile2.readline()
            character_name = myfile2.readline()
            character_ac_title = myfile2.readline() 
            character_ac = myfile2.readline()
            character_hp_title = myfile2.readline() 
            character_hp = myfile2.readline()
            character_xp_title = myfile2.readline() 
            character_xp = myfile2.readline()
            character_gold_title = myfile2.readline() 
            character_gold = myfile2.readline()
            character_status_title = myfile2.readline() 
            character_status = myfile2.readline()
            character_level_title = myfile2.readline() 
            character_level = myfile2.readline()
            death_count_title = myfile2.readline() 
            death_count = myfile2.readline()
            estate_title = myfile2.readline() 
            estate = myfile2.readline()
            offspring_title = myfile2.readline() 
            offspring = myfile2.readline()
            character_history_title = myfile2.readline()
            character_history = myfile2.readline()
            myfile2.close()
            character_ac = int(character_ac)
            character_hp = int(character_hp)
            character_xp = int(character_xp)
            character_gold = int(character_gold)
            character_level = int(character_level)
            death_count = int(death_count)
            estate = int(estate)
            offspring = int(offspring)
            player_attack = character_level+character_ac
            character_status = 'Attack bonus: +' + str(player_attack)
            death_count = int(death_count)
            bg_menu_list = ['minoans10.jpg','minoans27.jpg','minoans12.jpg','minoans13.jpg','minoans14.jpg','minoans15.jpg','minoans16.jpg','minoans17.jpg','minoans18.jpg','minoans19.jpg']
            bg_menu_choice = random.choice(bg_menu_list)
            bg_menu = pygame.image.load('town1.jpg')
            win_menu = pygame.display.set_mode((screen_width, screen_height))
            pygame.display.set_caption("Estate")
            win.blit(bg_menu, (0,0))
            mtext = font.render('Upgrade options:', 1, (0,0,0))
            text = font.render('Player status:', 1, (0,0,0))
            text2 = font.render('Name: ' + str(character_name), 1, (0,0,0))
            text3 = font.render('AC: ' + str(character_ac), 1, (0,0,0))
            text4 = font.render('HP: '+ str(character_hp), 1, (0,0,0))
            text5 = font.render('XP: '+ str(character_xp), 1, (0,0,0))
            text6 = font.render('Gold: '+ str(character_gold), 1, (0,0,0))
            text6a = font.render('Estate level: '+ str(estate), 1, (0,0,0))
            text6b = font.render('Level: '+ str(character_level), 1, (0,0,0))
            text6c = font.render('Offspring: '+ str(offspring), 1, (0,0,0))
            text16 = font.render('-----------------+------------------', 1, (0,0,0))
            mtext0 = font.render((str('Indulge ')) + str((character_hp*character_hp*10+100)) +str( 'GP (Left Arrow)'), 1, (0,0,0))
            mtext1 = font.render((str('Offspring '))+ str((offspring*offspring*offspring*1000+1000)) +str( 'GP (Right Arrow)'), 1, (0,0,0))
            mtext2 = font.render((str('Build '))+ str((estate*estate*estate*10000+10000)) +str( 'GP (Up Arrow)'), 1, (0,0,0))
            mtext3 = font.render('Leave estate (Down Arrow)', 1, (0,0,0))
            mtext3a = font.render('Backup game (TAB Key)', 1, (0,0,0))
            mtext16 = font.render('-----------------+------------------', 1, (0,0,0))
            win.blit(text, (720,260))
            win.blit(text16, (720,280)) 
            win.blit(text2, (720,300))
            win.blit(text3, (720,320))
            win.blit(text4, (720,340))
            win.blit(text5, (720,360))
            win.blit(text6, (720,380))
            win.blit(text6a, (720,400))
            win.blit(text6b, (720,420))
            win.blit(text6c, (720,440))
            win.blit(mtext0, (10,320))
            win.blit(mtext1, (10,340))  
            win.blit(mtext2, (10,300))
            win.blit(mtext3, (10,360))
            win.blit(mtext3a, (10,380))
            win.blit(mtext, (10,260))
            win.blit(mtext16, (10,280))
            death_count = int(death_count)
            if xm2 >= -120000000000000:    
                    xm2, ym2 = xm2 - 1, ym2 + 0
            else:
                    xm2 = 990

            mtext11 = font.render(character_history, 1, (text_colour))
            win.blit(mtext11, (xm2+80,ym2))
            pygame.display.update()
            keys = pygame.key.get_pressed()
            if keys[pygame.K_LEFT]:
                        if character_gold < (character_hp*character_hp*10+100):
                            speak.Speak('You do not have enough gold')
                        else:
                            soundmenu.play()
                            character_gold = character_gold - (character_hp*character_hp*10+100)
                            character_hp = character_hp + 1
                            bg_menu_list = ['town1.jpg','minoans10.jpg','minoans27.jpg','minoans12.jpg','minoans13.jpg','minoans14.jpg','minoans17.jpg','minoans18.jpg','minoans19.jpg']
                            bg_menu_choice = random.choice(bg_menu_list)
                            bg_menu = pygame.image.load(bg_menu_choice)
                            win_menu = pygame.display.set_mode((screen_width, screen_height))
                            pygame.display.set_caption("Estate")
                            win.blit(bg_menu, (0,0))
                            mtext0 = font.render((str('Indulge ')) + str((character_hp*character_hp*10+100)) +str( 'GP (Left Arrow)'), 1, (50,110,10))
                            win.blit(mtext0, (10,320))
                            pygame.display.update()
                            speak.Speak('You indulge')
            if keys[pygame.K_RIGHT]:
                        if character_gold < (offspring*offspring*offspring*1000+1000):
                            speak.Speak('You do not have enough gold')
                        else:
                            soundmenu.play()
                            character_gold = character_gold - (offspring*offspring*offspring*1000+1000)
                            mtext1 = font.render((str('Offspring '))+ str((offspring*offspring*offspring*1000+1000)) +str( ' (Right Arrow)'), 1, (50,110,10))
                            win.blit(mtext1, (10,340))
                            pygame.display.update()
                            speak.Speak('You have increased your offspring')
                            offspring = offspring + 1
            if keys[pygame.K_UP]:
                        if character_gold < (estate*estate*estate*10000+10000):
                            speak.Speak('You do not have enough gold')
                        else:
                            soundmenu.play()
                            character_gold = character_gold - (estate*estate*estate*10000+10000)
                            mtext2 = font.render((str('Build '))+ str((estate*estate*estate*10000+10000)) +str( ' (Up Arrow)'), 1, (50,110,10))
                            win.blit(mtext2, (10,300))
                            pygame.display.update()
                            speak.Speak('You build a larger estate')
                            estate = estate + 1
            if keys[pygame.K_DOWN] and y < (screen_height -50):
                        soundmenu.play()
                        mtext3 = font.render('Leave estate (Down Arrow)', 1, (50,110,10))
                        win.blit(mtext3, (10,360))
                        pygame.display.update()
                        speak.Speak('You have exited the estate')
                        start_menu()
                        break
            if keys[pygame.K_ESCAPE]:
                        soundmenu.play()
                        speak.Speak('You have exited the game')
                        pygame.quit()
            if keys[pygame.K_SPACE]:
                        soundmenu.play()
                        mtext2 = font.render('Start (Up Arrow)', 1, (50,110,10))
                        win.blit(mtext2, (10,300))
                        pygame.display.update()
                        soundstart.play()
                        speak.Speak('You have entered a new area')
                        break
            if keys[pygame.K_TAB]:
                        soundmenu.play()
                        mtext3a = font.render('Backup game (TAB Key)', 1, (50,110,10))
                        win.blit(mtext3a, (10,380))
                        pygame.display.update()
                        speak.Speak('You have backed up your game to the savegame2 text file')
            myfile = open("game_save.txt", "w")
            myfile.write("character_name = \n")
            myfile.write(str(character_name))           
            myfile.write("character_ac = \n")
            myfile.write(str(character_ac)+"\n")
            myfile.write("character_hp = \n")
            myfile.write(str(character_hp)+"\n")
            myfile.write("character_xp = \n")
            myfile.write(str(character_xp)+"\n")
            myfile.write("character_gold = \n")
            myfile.write(str(character_gold)+"\n")
            myfile.write("character_status = \n")
            myfile.write(str(" ")+"\n")
            myfile.write("character_level = \n")
            myfile.write(str(character_level)+"\n")
            myfile.write("death_count = \n")
            myfile.write(str(death_count)+"\n")
            myfile.write("estate = \n")
            myfile.write(str(estate)+"\n")
            myfile.write("offspring = \n")
            myfile.write(str(offspring)+"\n")
            myfile.write("character_history = \n")
            myfile.write(str(character_history))
            myfile.close()    

### Function to load the main game graphics ###
def redrawGameWindow():
        if switch_light == False:
            win.blit(switchoff, (switchx, switchy))
        if switch_light == True:
            win.blit(switchon, (switchx, switchy))
        if character_level <= -1:
            char = pygame.image.load('Undead.png')
        elif character_level == 13:
            char = pygame.image.load('Megarachne.png')
        elif character_level == 14:
            char = pygame.image.load('Hound.png')
        elif character_level == 15:
            char = pygame.image.load('Wolf.png')
        elif character_level == 16:
            char = pygame.image.load('Serpent.png')
        elif character_level == 17:
            char = pygame.image.load('Arthropleura.png')
        elif character_level == 18:
            char = pygame.image.load('Minotaur.png')
        else:
            char = pygame.image.load('test9.png')
        #char = pygame.image.load(random.choice(character_tiles))
        fire = pygame.image.load(random.choice(fire_tiles))
        round_count = 0
        win.blit(bg, (0,0))
        win.blit(char, (x,y))
        mon_name = monster_name.replace(".png","")
        monster_status = 'Defence bonus: -' + str(monster_ac)
        player_attack = character_level+character_ac
        character_status = 'Attack bonus: +' + str(player_attack)
        if switch_light == False:
            win.blit(switchoff, (switchx, switchy))
        if switch_light == True:
            win.blit(switchon, (switchx, switchy))
        if treasure_room == False:
            win.blit(end_tile, (endx, endy))
        if treasure_room == True:
            win.blit(end_tile2, (endx, endy))
        for n in (current_map_list):
                temp_list = n
                img_tile_index = temp_list[0]
                img_tile_load = pygame.image.load(img_tile_index)
                random_tilex_index = int(temp_list[1])
                random_tiley_index = int(temp_list[2])
                win.blit(img_tile_load, (random_tilex_index, random_tiley_index))
        for mon in (current_monster_list):
                        monster_temp_list = mon
                        mon_img_tile_index = monster_temp_list[0]
                        mon_img_tile_load = pygame.image.load(mon_img_tile_index)
                        mon_random_tilex_index = int(monster_temp_list[1])
                        mon_random_tiley_index = int(monster_temp_list[2])
                        win.blit(mon_img_tile_load, (mon_random_tilex_index, mon_random_tiley_index))      
        for wall in (wall_list):
                        wall_temp_list = wall
                        wall_img_tile_load = walls
                        wall_tilex_index = int(wall_temp_list[0])
                        wall_tiley_index = int(wall_temp_list[1])
                        win.blit(walls, (wall_tilex_index, wall_tiley_index))                       
        win.blit(char, (x,y))
        win.blit(start_tile, (startx, starty))   
        if treasure_room == False:
            win.blit(end_tile, (endx, endy))
        if treasure_room == True:
            win.blit(end_tile2, (endx, endy))
        if torch == True:
            win.blit(char_torch, (x-950,y-950))
        if torch == False:
            win.blit(char_torch2, (x-950,y-950))
        win.blit(backtemplate, (680, -5))
        text = font.render('Coordinates: ' + str(x)+ ','+str(y), 1, (text_colour))
        text0 = font.render(str(game_event1)+" "+str(game_event2)+" "+str(game_event3), 1, (text_colour))
        text1 = font.render('Action: ' + str(action), 1, (text_colour))
        text2 = font.render('Character: ' + str(character_name), 1, (text_colour))
        text3 = font.render('AC: ' + str(character_ac), 1, (text_colour))
        text4 = font.render('HP: '+ str(character_hp), 1, (text_colour))
        text5 = font.render('XP: '+ str(character_xp), 1, (text_colour))
        text6 = font.render('Gold: '+ str(character_gold), 1, (text_colour))
        text7 = font.render('Status: '+ str(character_status), 1, (text_colour))
        text8 = font.render('Level: '+ str(character_level), 1, (text_colour))
        text9 = font.render('Monster: ' + str(mon_name), 1, (text_colour))
        text10 = font.render('AC: ' + str(monster_ac), 1, (text_colour))
        text11 = font.render('HP: '+ str(monster_hp), 1, (text_colour))
        text12 = font.render('XP: '+ str(monster_xp), 1, (text_colour))
        text13 = font.render('Gold: '+ str(monster_gold), 1, (text_colour))
        text14 = font.render('Status: '+ str(monster_status), 1, (text_colour))
        text15 = font.render('Level: '+ str(monster_level), 1, (text_colour))
        text16 = font.render('-----------------+------------------', 1, (text_colour))
        win.blit(text, (700,2))
        win.blit(text0, (700,180))
        win.blit(text1, (700,200)) 
        win.blit(text16, (700,210)) 
        win.blit(text2, (700,220))
        win.blit(text3, (700,240))
        win.blit(text4, (700,260))
        win.blit(text5, (700,280))
        win.blit(text6, (700,300))
        win.blit(text7, (700,320))
        win.blit(text8, (700,340))
        win.blit(text16, (700,350))                     
        win.blit(text9, (700,360))
        win.blit(text10, (700,380))
        win.blit(text11, (700,400))
        win.blit(text12, (700,420))
        win.blit(text13, (700,440))
        win.blit(text14, (700,460))
        win.blit(text15, (700,480))
        text1 = font.render('Action: ' + str(action), 1, (text_colour)) 
        win.blit(text1, (700,200))
        img_selection = pygame.image.load('img_dice.png')     
        if die_roll == False:
            if battle == False:
                img_selection = pygame.image.load('img_inventory.png')
                win.blit(img_selection, (700,30))
            else:
                img_selection = pygame.image.load('img_'+ str(monster_name))
                win.blit(img_selection, (700,30))
        win.blit(img_selection, (700,30))          
        pygame.display.update()
       
### Main game loop ###
random_select = 2
menu = True
while menu == True:
    x = startx+40
    y = starty
    start_menu()
    menu_choice = str(1)
    if menu_choice == str(2):
        x = startx+40
        y = starty
        start_menu() 
    if menu_choice == str(3):
        exit()
    while menu_choice == str(1):

        ### Creates a random room based map each time player explores a new area ### Check wall_listmap2 calculation includes all activated rooms
        if random_select == 1:
            print(random_select)
            wall_listmap2 = []
            room_maps1 = random.choice(room_lists1)
            room_maps2 = random.choice(room_lists2)
            room_maps3 = random.choice(room_lists3)
            #room_maps4 = random.choice(room_lists4)
            room_maps5 = random.choice(room_lists5)
            room_maps6 = random.choice(room_lists6)
            room_maps7 = random.choice(room_lists7)
            room_maps8 = random.choice(room_lists8)
            room_maps9 = random.choice(room_lists9)
            backwall = [(640, 0), (640, 40), (640, 80), (640, 120), (640, 160), (640, 200), (640, 240), (640, 280), (640, 320), (640, 360), (640, 400), (640, 440), (640, 480)]
            wall_listmap2 = wall_listmap2 + room_maps1 + room_maps2 + room_maps3 + room_maps3 + room_maps5 + room_maps6 + room_maps7 + room_maps8 + room_maps9 + backwall
            print(wall_listmap2)
                                                   
            myfile99 = open("rmapcoords2.txt", "w")
            myfile99.write("Random map coordinates are:\n")
            myfile99.write(str(wall_listmap2))           
            myfile99.close()
            wall_list = wall_listmap2

        ### Creates a completely random map each time player explores a new area ###
        if random_select == 3:
            print(random_select)
            wall_listmap2 = []
            ycoord = 0
            xcoord = 0
            for n in range(13):
                                            for i in yrow40:
                                                    icoord = i
                                                    mapcoord = (xcoord, ycoord)
                                                    icoord = random.randint(0,4)
                                                    if icoord == 1 and xcoord <= 640:
                                                            wall_listmap2.append(mapcoord)
                                                    xcoord += 40
                                            xcoord = 0
                                            ycoord += 40
            myfile99 = open("rmapcoords2.txt", "w")
            myfile99.write("Random map coordinates are:\n")
            myfile99.write(str(wall_listmap2))           
            myfile99.close()
            wall_list = wall_listmap2

        ### Loads a custom map the first time a player explores an area ###
        elif random_select == 2:
            print(random_select)
            wall_list = random.choice(wall_lists) 
            wall_listmap = []
            ycoord = 0
            xcoord = 0
            myfile3 = open("map.txt", "r")
            for n in range(13):
                            yrow40 = myfile3.readline()
                            for i in yrow40:
                                    icoord = i
                                    mapcoord = (xcoord, ycoord)
                                    if icoord == str("W") and xcoord <= 640:
                                            wall_listmap.append(mapcoord)
                                    if icoord == str("T") and xcoord <= 640:
                                            endx = xcoord
                                            endy = ycoord
                                    xcoord += 40
                            xcoord = 0
                            ycoord += 40
            myfile3.close()
            myfile4 = open("mapcoords.txt", "w")
            myfile4.write("Map coordinates are:\n")
            myfile4.write(str(wall_listmap))           
            myfile4.close()
            wall_list = wall_listmap
            random_select = 2

        ### Selects a predesigned map each time player explores a new area ###
        elif random_select == 0:
            print(random_select)
            wall_list = random.choice(wall_lists)

        ### Function called to populate the selected map with non-wall tiles ###   
        new_map()

        ### Loads the player in the new map ###
        myfile2 = open("game_save.txt", "r")
        character_title = myfile2.readline()
        character_name = myfile2.readline()
        character_ac_title = myfile2.readline() 
        character_ac = myfile2.readline()
        character_hp_title = myfile2.readline() 
        character_hp = myfile2.readline()
        character_xp_title = myfile2.readline() 
        character_xp = myfile2.readline()
        character_gold_title = myfile2.readline() 
        character_gold = myfile2.readline()
        character_status_title = myfile2.readline() 
        character_status = myfile2.readline()
        character_level_title = myfile2.readline() 
        character_level = myfile2.readline()
        death_count_title = myfile2.readline() 
        death_count = myfile2.readline()
        estate_title = myfile2.readline() 
        estate = myfile2.readline()
        offspring_title = myfile2.readline() 
        offspring = myfile2.readline()
        character_history_title = myfile2.readline()
        character_history = myfile2.readline()
        myfile2.close()
        character_ac = int(character_ac)
        character_hp = int(character_hp)
        character_xp = int(character_xp)
        character_gold = int(character_gold)
        character_level = int(character_level)
        death_count = int(death_count)
        offspring = int(offspring)
        estate = int(estate)

        ### Resets all the settings and inputs for a new map ###
        game_loop = True
        if lights == True: 
                                    char_torch = pygame.image.load('test9b.png')
                                    char_torch2 = pygame.image.load('test9b.png')
        elif lights == False:
                                    char_torch = pygame.image.load('test9c.png')
                                    char_torch2 = pygame.image.load('test9d.png')
        redrawGameWindow()
        pygame.display.update()
        speak.Speak('Welcome' + str(character_name) +'. You have entered the '+ str(game_event1) + str(game_event2)+ str(game_event3))
        music2 = pygame.mixer.music.load('menu.mp3')
        music2
        random_select = 1

        ### Main game engine loop ###
        while game_loop == True:  
                character_hp = int(float(character_hp))
                if (x,y) == (startx, starty):
                        soundteleport.play()
                        speak.Speak('You have exited this area')
                        character_history = str(character_history)+str(", [You explored the ") + str(game_event1)+str(" ") + str(game_event2)+str(" ") + str(game_event3)+str(". ")+ str(game_objective_found) +str(" At this stage you were a level ") +str(character_level)+(" with ")+str(character_ac)+(" armor class and ")+str(character_xp)+(" experience points and ")+str(character_gold)+(" gold, and had achieved ") + str(death_count)+str(" kills and a level ") + str(estate)+str(" estate with ")+ str(offspring)+str(" offspring.")+str("]")
                        game_save()
                        x = startx+40
                        y = starty
                        game_event1 = random.choice(game_event_list1)
                        game_event2 = random.choice(game_event_list2)
                        game_event3 = random.choice(game_event_list3)
                        game_objective1 = random.choice(game_objectives_list1)
                        game_objective_found = " "
                        if game_event1 == 'Cursed':
                                map_tiles = ['walls9.png']
                        else:
                            map_tiles = ['grass.png','grass2.png', 'water.png']
                        battle =  False
                        die_roll = False
                        switch_light = False
                        lights = False
                        torch = False
                        treasure_room = False
                        treasure_claimed = False
                        bg_choice = random.choice(bg_list)
                        bg = pygame.image.load(bg_choice)
                        wall_list = wall_listmap2
                        print(wall_list)
                        wall0 = random.choice(wall_tiles0)
                        walls = pygame.image.load('walls9.png')
                        current_monster_list = []
                        current_map_list = []
                        menu_choice = 0
                        new_treasure = False
                        new_light = False
                        while new_treasure == False:
                            endx_check = random.randrange(40,640,40)
                            endy_check = random.randrange(40,480,40)
                            if (endx_check, endy_check) not in wall_list and (startx+40,starty):
                                endx = endx_check
                                endy = endy_check
                                new_treasure = True
                        while new_light == False:
                            endx_check = random.randrange(40,640,40)
                            endy_check = random.randrange(40,480,40)
                            if (endx_check, endy_check) not in wall_list and (startx+40,starty):
                                switchx = endx_check
                                switchy = endy_check
                                new_light = True
                        break
                if (x,y) == (switchx, switchy):
                        if switch_light == False:
                             soundstart.play()
                             switch_light = True
                             speak.Speak('You have activated the furnace and illuminated the area')
                             
                             if lights == False:
                                    lights = True
                                    char_torch = pygame.image.load('test9b.png')
                                    char_torch2 = pygame.image.load('test9b.png')
                             elif lights == True:
                                    lights = False
                                    char_torch = pygame.image.load('test9c.png')
                                    char_torch2 = pygame.image.load('test9d.png')
                        elif switch_light == True:
                             soundevent.play()
                             switch_light = False
                             speak.Speak('You have deactivated the furnace and darkened the area')
                             if lights == False:
                                    lights = True
                                    char_torch = pygame.image.load('test9b.png')
                                    char_torch2 = pygame.image.load('test9b.png')
                             elif lights == True:
                                    lights = False
                                    char_torch = pygame.image.load('test9c.png')
                                    char_torch2 = pygame.image.load('test9d.png')
                if (x,y) == (endx, endy):
                        if treasure_room == False:
                            speak.Speak('You cannot access this room until you have found the key')
                            x = lastx
                            y = lasty
                        elif treasure_claimed == True:
                            speak.Speak('You have already accessed this room')
                            x = lastx
                            y = lasty
                        elif treasure_room == True:
                            soundstart.play()
                            treasure_gold = random.randint(500,1000)
                            character_gold = character_gold + treasure_gold
                            character_xp = character_xp + treasure_gold + 1000
                            treasure = random.randint(1,1000)
                            game_objective1 = random.choice(game_objectives_list1)
                            game_objective_found = str(game_objective1)
                            speak.Speak('You use the key to access this room')
                            speak.Speak(game_objective_found)
                            speak.Speak('You have found '+ str(treasure_gold) + ' gold pieces')
                            if treasure > 500:
                                                                        character_ac = character_ac + 1
                                                                        speak.Speak('You have found a rare piece of armor')
                                                                        speak.Speak('Your armor class is now ' + str(character_ac))
                            elif treasure > 200:
                                                                        character_hp = character_hp + 3
                                                                        speak.Speak('You have found a hoard of fresh food')
                                                                        speak.Speak('Your hit points are now ' + str(character_hp))
                            else:
                                                                        character_hp = character_hp - 3
                                                                        speak.Speak('You have found a hoard of fresh food')
                                                                        speak.Speak('You start to feel ill and realise the food was poisoned')
                                                                        speak.Speak('Your hit points are now ' + str(character_hp))
                            treasure_claimed = True
                            x = lastx
                            y = lasty
                if character_hp == 0:
                        speak.Speak('You have no hit points left and have perished')
                        speak.Speak('In an infinite universe our moments of pleasure and pain are repeated forever. But never fear because we shall always be together.')
                        game_event1 = random.choice(game_event_list1)
                        game_event2 = random.choice(game_event_list2)
                        game_event3 = random.choice(game_event_list3)
                        game_objective1 = random.choice(game_objectives_list1)
                        game_objective_found = "You were not able to obtain the key to the treasure room before the last monster fled."
                        bg_choice = random.choice(bg_list)
                        bg = pygame.image.load(bg_choice)
                        wall_list = wall_listmap2
                        current_monster_list = []
                        current_map_list = []
                        character_xp, character_gold, character_hp = 0, 0, 1
                        character_level = -1
                        if offspring >0:
                            offspring = offspring -1
                            character_name = ("Offspring No. ")  +str((max_offspring-offspring+1))+str(".\n")
                            character_ac, character_xp, character_gold, character_hp = 5, 2000, 100, 20
                            character_level = 1

                        game_save()
                        
                        battle =  False
                        die_roll = False
                        switch_light = False
                        lights = False
                        torch = False
                        new_treasure = False
                        new_light = False
                        treasure_room = False
                        treasure_claimed = False
                        x, y = startx+40, starty
                        menu_choice = 0
                        break
                if character_hp > 0:
                        lastx = x
                        lasty = y
                        pygame.time.delay(100)
                        for event in pygame.event.get():
                            if event.type == pygame.QUIT:
                                run = False
                        keys = pygame.key.get_pressed()
                        if keys[pygame.K_LEFT] and x > 0 and (x-40,y) not in wall_list:
                                x -= 40
                                sound1.play()
                        if keys[pygame.K_RIGHT] and x < (screen_width - 300) and (x+40,y) not in wall_list:
                                x += 40
                                sound1.play()
                        if keys[pygame.K_UP] and y > 0 and (x,y-40) not in wall_list:
                                y -= 40
                                sound1.play()
                        if keys[pygame.K_DOWN] and y < (screen_height -40)and (x,y+40) not in wall_list:
                                y += 40
                                sound1.play()
                        if keys[pygame.K_SPACE]:
                                soundevent.play()
                                if die_roll == False:
                                    die_roll = True
                                elif die_roll == True:
                                    die_roll = False
                        if keys[pygame.K_ESCAPE]:
                                soundmenu.play()
                                game_save()
                                menu_option = False
                                speak.Speak('You have exited the game')
                                pygame.quit()
                        if keys[pygame.K_0]:
                                soundevent.play()
                                if torch == False:
                                    if character_gold >= 5:
                                        speak.Speak('You use 5 gold worth of resources to make a torch')
                                        character_gold = character_gold - 5
                                        torch = True
                                    else:
                                        speak.Speak('You do not have enough resources to make a torch')  
                                elif torch == True:
                                    torch = False
                                    speak.Speak('You discard your torch')

                        #if keys[pygame.K_3]:
                                #soundevent.play()
                                #if lights == False:
                                    #lights = True
                                    #char_torch = pygame.image.load('test9b.png')
                                    #char_torch2 = pygame.image.load('test9b.png')
                                #elif lights == True:
                                    #lights = False
                                    #char_torch = pygame.image.load('test9c.png')
                                    #char_torch2 = pygame.image.load('test9d.png')            

                        if keys[pygame.K_4]:
                                soundevent.play()
                                random_select = 1
                                speak.Speak('You have selected random room maps')
                        if keys[pygame.K_5]:
                                soundevent.play()
                                random_select = 0      
                                speak.Speak('You have selected normal maps')
                        if keys[pygame.K_6]:
                                soundevent.play()
                                random_select = 2      
                                speak.Speak('You have selected custom maps')
                        if keys[pygame.K_7]:
                                soundevent.play()
                                random_select = 3
                                speak.Speak('You have selected completely random maps')
                        
                        
                        round_count = 0
                        tile_count = 0
                        player_attack = character_level+character_ac
                        if die_roll == True and round_count < 10:
                            die_rolls = random.randint(1,100)
                            round_count += 1
                            action = 'dice rolled'
                            if die_rolls == 1:
                                img_selection = pygame.image.load('img_die1.png')
                                action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                            elif die_rolls == 2:
                                img_selection = pygame.image.load('img_die2.png')
                                action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                            elif die_rolls == 3:
                                img_selection = pygame.image.load('img_die3.png')
                                action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                            elif die_rolls == 4:
                                img_selection = pygame.image.load('img_die4.png')
                                action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                            elif die_rolls == 5:
                                img_selection = pygame.image.load('img_die5.png')
                                action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                            elif die_rolls == 6:
                                img_selection = pygame.image.load('img_die6.png')
                                action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                            elif die_rolls >= 7:
                                img_selection = pygame.image.load('img_die6.png')
                                action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                        redrawGameWindow()
                        pygame.display.update()
                        if x in current_monster_list and y in current_monster_list:
                                action = 'Monster encounter'
                                win.blit(monster1, (x+40,y))
                                pygame.display.update()
                                battle = True
                        monster_encounter = False
                        list_length = len(current_monster_list)
                        game_status = 'Gameplay'
                        text0 = font.render('Game status: ' + str(game_status), 1, (text_colour))
                        win.blit(text0, (700,12))
                        pygame.display.update()
                        battle_loop = True
                        if battle_loop == True:          
                                if list_number >= list_length:
                                        list_number = 0
                                if int(list_length) == 1:
                                        game_save()
                                        current_monster_list = []
                                        monster_tile_count = 0
                                        while monster_tile_count < max_monsters:
                                                random_tilex = random.randrange(40,640,40)
                                                random_tiley = random.randrange(40,480,40)
                                                monster_tiles = ['Guard.png', 'Priestess.png', 'Minotaur.png', 'Undead.png', 'Wolf.png', 'Arthropleura.png', 'Megarachne.png', 'Serpent.png', 'Hound.png']
                                                monster_img_tile = random.choice(monster_tiles)
                                                monster_select_tile = pygame.image.load(monster_img_tile)
                                                win.blit(monster_select_tile, (random_tilex, random_tiley))
                                                monster_coords = (monster_img_tile, random_tilex, random_tiley)
                                                if (random_tilex,random_tiley) not in wall_list:
                                                        current_monster_list.append(monster_coords)
                                                        monster_tile_count += 1
                                        speak.Speak('The last monster has fled, and you are able to access the treasure room.')
                                        treasure_room = True
                                        game_event1 = random.choice(game_event_list1)
                                        game_event2 = random.choice(game_event_list2)
                                        game_event3 = random.choice(game_event_list3)
                                        game_objective1 = random.choice(game_objectives_list1)
                                        game_objective_found = " "
                                        character_history = str(character_history)+str(", [You explored the ") + str(game_event1)+str(" ") + str(game_event2)+str(" ") + str(game_event3)+str(". ")+str(", [You have achieved ") + str(death_count)+str(" kills and ") + str(offspring)+str(" offspring and have a ")+ str(estate)+str(" level estate. ") + str(game_objective_found)+str("]")
                                        game_save()
                                        bg_choice = random.choice(bg_list)
                                        bg = pygame.image.load(bg_choice)
                                        battle =  False
                                        die_roll = False
                                        switch_light = False
                                        lights = False
                                        torch = False
                                        new_treasure = False
                                        new_light = False
                                        treasure_room = False
                                        treasure_claimed = False
                                        wall_list = wall_listmap2
                                        current_monster_list = []
                                        current_list = []
                                        soundteleport.play()
                                        menu_choice = 0
                                        break
                                else:        
                                        while list_number < len(current_monster_list):
                                                        temp_list = current_monster_list[list_number]
                                                        img_tile_index = temp_list[0]
                                                        img_tile_load = pygame.image.load(img_tile_index)
                                                        random_tilex_index = int(temp_list[1])
                                                        random_tiley_index = int(temp_list[2])
                                                        redrawGameWindow()
                                                        if x < random_tilex_index or y > random_tiley_index:
                                                                game_status = 'Exploring'
                                                                text0 = font.render('Game status: ' + str(game_status), 1, (text_colour))
                                                                win.blit(text0, (700,12))
                                                                pygame.display.update()
                                                                redrawGameWindow()
                                                                list_number = list_number + 1
                                                                break
                                                        if x == random_tilex_index and y == random_tiley_index:
                                                                monster_name = str(img_tile_index)
                                                                if monster_name == 'Item.png':
                                                                    soundmonsterdeath.play()
                                                                    current_monster_list.pop(list_number)
                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 0,0,0,0
                                                                    gold = random.randint(0,5)
                                                                    character_gold = character_gold + gold
                                                                    character_xp = character_xp + gold 
                                                                    img_selection = pygame.image.load('img_item.png')
                                                                    text0 = font.render('Game status: ' + str(game_status), 1, (text_colour))
                                                                    win.blit(text0, (700,12))
                                                                    win.blit(img_selection, (700,30))
                                                                    pygame.display.update()
                                                                    pygame.time.delay(1000)
                                                                    speak.Speak('You search a minoan container and find ' + str(gold) + ' gold')
                                                                    treasure = random.randint(0,1000)
                                                                    if treasure > 990:
                                                                        print('Armor found is based on treasure value of '+str(treasure))
                                                                        character_ac = character_ac + 1
                                                                        speak.Speak('You have found a rare piece of armor')
                                                                        speak.Speak('Your armor class is now ' + str(character_ac))
                                                                    elif treasure > 800:
                                                                        print('Food found is base on treasure value of '+str(treasure))
                                                                        character_hp = character_hp + 1
                                                                        speak.Speak('You have found some scraps of food')
                                                                        speak.Speak('Your hit points are now ' + str(character_hp))
                                                                    redrawGameWindow()
                                                                else: 
                                                                    game_status = 'Attacked by ' + str(img_tile_index)
                                                                    monster_name = str(img_tile_index)
                                                                    monster_level = 0
                                                                    mon_name = 'monster'
                                                                    if monster_name == 'Megarachne.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 0,10,5,1
                                                                                    img_selection = pygame.image.load('img_megarachne.png')
                                                                    if monster_name == 'Priestess.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 1,15,10,2
                                                                                    img_selection = pygame.image.load('img_priestess.png')
                                                                    if monster_name == 'Hound.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 2,20,12,3
                                                                                    img_selection = pygame.image.load('img_hound.png')              
                                                                    if monster_name == 'Arthropleura.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 3,25,15,4
                                                                                    img_selection = pygame.image.load('img_arthropleura.png')
                                                                    if monster_name == 'Guard.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 4,30,20,5
                                                                                    img_selection = pygame.image.load('img_guard.png')
                                                                    if monster_name == 'Wolf.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 5,35,30,6
                                                                                    img_selection = pygame.image.load('img_wolf.png')
                                                                    if monster_name == 'Undead.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 6,50,40,7
                                                                                    img_selection = pygame.image.load('img_undead.png')
                                                                    if monster_name == 'Serpent.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 8,75,60,8
                                                                                    img_selection = pygame.image.load('img_serpent.png')
                                                                    if monster_name == 'Minotaur.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 10,150,100,8
                                                                                    img_selection = pygame.image.load('img_minotaur.png')
                                                                    if monster_name == 'Griffin.png':
                                                                                    monster_ac, monster_xp, monster_gold, monster_level  = 48,150000,100000,24
                                                                                    img_selection = pygame.image.load('img_griffin.png')                
                                                                    text0 = font.render('Game status: ' + str(game_status), 1, (text_colour))
                                                                    win.blit(text0, (700,12))
                                                                    win.blit(img_selection, (700,30))
                                                                    pygame.display.update()
                                                                    redrawGameWindow()
                                                                    mon_name = monster_name.replace(".png","")
                                                                    speak.Speak('You are being attacked by a '+ mon_name)        
                                                                    battle = True
                                                                    while battle == True:
                                                                            game_status = 'Push Spacebar'
                                                                            text0 = font.render('Game status: ' + str(game_status), 1, (text_colour))
                                                                            win.blit(text0, (700,12))
                                                                            charfight = pygame.image.load(random.choice(charfight_tiles))
                                                                            win.blit(charfight, (x,y))
                                                                            pygame.display.update()
                                                                            redrawGameWindow()
                                                                            if character_hp == 0:
                                                                                    speak.Speak(str(character_name)+' has no hit points left and has perished')
                                                                                    speak.Speak('In an infinite universe our moments of pleasure and pain are repeated forever. But never fear because we shall always be together.')
                                                                                    battle =  False
                                                                                    die_roll == False
                                                                                    character_xp, character_gold, character_hp, character_level, x, y = 0, 0, 1, character_level - 1, startx+40, starty
                                                                                    character_level = -1
                                                                                    if offspring >0:
                                                                                        offspring = offspring -1
                                                                                        character_name = ("Offspring No. ")  +str((max_offspring-offspring+1))+str(".\n")
                                                                                        character_ac, character_xp, character_gold, character_hp = 5, 2000, 100, 20
                                                                                        character_level = 1
                                                                                    game_save()
                                                                                    start_menu()
                                                                            if character_hp > 0: 
                                                                                    pygame.time.delay(100)
                                                                                    for event in pygame.event.get():
                                                                                        if event.type == pygame.QUIT:
                                                                                            run = False
                                                                                    keys = pygame.key.get_pressed()
                                                                                    if keys[pygame.K_SPACE]:
                                                                                            if die_roll == False:
                                                                                                die_roll = True
                                                                                            elif die_roll == True:
                                                                                                die_roll = False
                                                                                    round_count = 0
                                                                                    tile_count = 0
                                                                                    if die_roll == True and round_count < 10:
                                                                                                    die_rolls = random.randint(1,100)
                                                                                                    round_count += 1
                                                                                                    action = 'dice rolled'
                                                                                                    if die_rolls == 1:
                                                                                                            img_selection = pygame.image.load('img_die1.png')
                                                                                                            action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                                                                                                            redrawGameWindow()
                                                                                                    elif die_rolls == 2:
                                                                                                            img_selection = pygame.image.load('img_die2.png')
                                                                                                            action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                                                                                                            redrawGameWindow()
                                                                                                    elif die_rolls == 3:
                                                                                                            img_selection = pygame.image.load('img_die3.png')
                                                                                                            action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                                                                                                            redrawGameWindow()
                                                                                                    elif die_rolls == 4:
                                                                                                            img_selection = pygame.image.load('img_die4.png')
                                                                                                            action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                                                                                                            redrawGameWindow()
                                                                                                    elif die_rolls == 5:
                                                                                                            img_selection = pygame.image.load('img_die5.png')
                                                                                                            action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                                                                                                            redrawGameWindow()
                                                                                                    elif die_rolls == 6:
                                                                                                            img_selection = pygame.image.load('img_die6.png')
                                                                                                            action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                                                                                                            redrawGameWindow()
                                                                                                    elif die_rolls >= 7:
                                                                                                            img_selection = pygame.image.load('img_die6.png')
                                                                                                            action = 'Attack '+str(die_rolls) + " + "+str(player_attack) + " - " +str(monster_ac)
                                                                                                            redrawGameWindow()
                                                                                                    dice_rolled = int(die_rolls)+int(player_attack)-int(monster_ac) 
                                                                                                    text1 = font.render('Action: ' + str(action), 1, (text_colour))
                                                                                                    win.blit(text1, (700,200))
                                                                                                    win.blit(img_selection, (700,30))
                                                                                                    pygame.display.update()
                                                                                                    if dice_rolled > 49:
                                                                                                            soundsword.play()
                                                                                                            monster_hp = monster_hp - 1
                                                                                                            if monster_hp > 0:
                                                                                                                    game_status = 'Monster takes damage'
                                                                                                                    text0 = font.render('Game status: ' + str(game_status), 1, (text_colour))
                                                                                                                    win.blit(text0, (700,12))
                                                                                                                    die_roll = False
                                                                                                                    pygame.display.update()
                                                                                                                    redrawGameWindow()
                                                                                                                    speak.Speak('You damage the ' +str(mon_name)+ ' with an attack of '+str(dice_rolled))
                                                                                                                    speak.Speak('The ' +str(mon_name)+ ' hit points have been reduced to '+str(monster_hp))
                                                                                                            if monster_hp < 1:
                                                                                                                    soundmonsterdeath.play()
                                                                                                                    current_monster_list.pop(list_number)
                                                                                                                    battle =  False
                                                                                                                    die_roll = False
                                                                                                                    list_number = list_number + 1
                                                                                                                    list_no = False
                                                                                                                    character_xp = character_xp + monster_xp
                                                                                                                    if character_xp > 0:
                                                                                                                            character_level = 0
                                                                                                                    if character_xp > 1000:
                                                                                                                            character_level = 1
                                                                                                                    if character_xp > 2000:
                                                                                                                            character_level = 2
                                                                                                                    if character_xp > 4000:
                                                                                                                            character_level = 3
                                                                                                                    if character_xp > 8000:
                                                                                                                            character_level = 4
                                                                                                                    if character_xp > 16000:
                                                                                                                            character_level = 5
                                                                                                                    if character_xp > 32000:
                                                                                                                            if estate >0:
                                                                                                                                character_level = 6
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                            
                                                                                                                    if character_xp > 64000:
                                                                                                                            character_level = 7
                                                                                                                    if character_xp > 128000:
                                                                                                                            if estate >1:
                                                                                                                                character_level = 8
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                                                                                            
                                                                                                                    if character_xp > 256000:
                                                                                                                            character_level = 9
                                                                                                                    if character_xp > 512000:
                                                                                                                            if estate >2:
                                                                                                                                character_level = 10
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                                                                                    if character_xp > 1000000:
                                                                                                                            if estate >3:
                                                                                                                                character_level = 11
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                                                                                                
                                                                                                                    if character_xp > 5000000:
                                                                                                                            if estate >4:
                                                                                                                                character_level = 12
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                                                                                    if character_xp > 10000000:
                                                                                                                            if estate >5:
                                                                                                                                character_level = 13
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                                                                                    if character_xp > 20000000:
                                                                                                                            if estate >6:
                                                                                                                                character_level = 14
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                                                                                    if character_xp > 40000000:
                                                                                                                            if estate >7:
                                                                                                                                character_level = 15
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                                                                                    if character_xp > 60000000:
                                                                                                                            if estate >8:
                                                                                                                                character_level = 16
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                                                                                    if character_xp > 80000000:
                                                                                                                            if estate >9:
                                                                                                                                character_level = 17
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')
                                                                                                                    if character_xp > 100000000:
                                                                                                                            if estate >10:
                                                                                                                                character_level = 18
                                                                                                                            else:
                                                                                                                                speak.Speak('You need to upgrade your estate before you can level up.')     
                                                                                                                    character_gold = character_gold + monster_gold
                                                                                                                    recovered_hp = random.randint(0,2)
                                                                                                                    character_hp = character_hp + recovered_hp
                                                                                                                    speak.Speak('You damage the ' +str(mon_name)+ ' with an attack of '+str(dice_rolled))
                                                                                                                    speak.Speak('The ' +str(mon_name)+ 'hit points have been reduced to '+str(monster_hp))
                                                                                                                    speak.Speak('You have won the battle and have recovered '+str(recovered_hp)+ ' health')
                                                                                                                    speak.Speak('You now have '+str(character_xp)+' experience points and '+str(character_gold)+' gold')
                                                                                                                    death_count = death_count + 1
                                                                                                                    dice_rolled = 0
                                                                                                                    treasure_roll = random.randint(1,100)
                                                                                                                    if treasure_roll > 80:
                                                                                                                        treasure_room = True
                                                                                                                        soundteleport.play()
                                                                                                                        speak.Speak('You have found the key to the locked room')
                                                                                                                    monster_name = str(img_tile_index)
                                                                                                                    monster_tiles0 = ['Guard.png', 'Priestess.png', 'Minotaur.png', 'Undead.png', 'Wolf.png', 'Arthropleura.png', 'Megarachne.png', 'Serpent.png', 'Hound.png', 'Griffin.png']
                                                                                                                    monster_name0 = random.choice(monster_tiles0)
                                                                                                                    monster_name = str(monster_name0)
                                                                                                                    monster_status = 'Defence bonus: -' + str(monster_ac)
                                                                                                                    monster_hp = 3
                                                                                                                    redrawGameWindow()
                                                                                                                    game_save()
                                                                                                                    battle = False
                                                                                                                    die_roll = False
                                                                                                                    break
                                                                                                    elif dice_rolled < 50:
                                                                                                            soundmiss.play()
                                                                                                            game_status = 'Player takes damage'
                                                                                                            text0 = font.render('Game status: ' + str(game_status), 1, (text_colour))
                                                                                                            win.blit(text0, (700,12))
                                                                                                            pygame.display.update()
                                                                                                            redrawGameWindow()
                                                                                                            speak.Speak('You take damage from the ' +str(mon_name)+ ' with an attack of '+str(dice_rolled))
                                                                                                            character_hp = character_hp - 1
                                                                                                            speak.Speak('Your hit points are reduced to: '+str(character_hp))
                                                                                                            dice_rolled = 0
                                                                                                            die_roll = False
                                                                                                            game_save()
                                                                                                            break
                                                                break
          
                                                        else:
                                                                list_number = list_number + 1
                        redrawGameWindow()
pygame.quit()
